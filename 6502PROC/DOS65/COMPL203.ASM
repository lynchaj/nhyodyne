;COMPILE
;BASIC-E/65 COMPILER
;VERSION 2.03-A
;COPYRIGHT - RICHARD A. LEARY - 1982
;RELEASED:	18 OCTOBER 1982
;LAST REVISION:
;	24 DECEMBER 1983
;		ADDED CHKULE FOR PROD 5
;		MODIFIED ERROR TO PRINT LINE
;		ADDED CODE TO SET SEPRTR
;	12 JANUARY 1984
;		DELETED ERROR0 BIT AND BRANCH
;		FIXED FIRST BLANK LINE LIST FOR $B OPTION
;		FIXED BUFFER OVERWRITE ON ERROR
;	4 APRIL 2008
;		REFORMATTED FOR ASM211 & TASM
;		ELIMINATED PAGE ZERO 0 & 1
;		MOVED SOME VARIABLES FROM PAGE ZERO
;A TRANSLATION OF GORDON EUBANKS BASIC-E TO OPERATE UNDER DOS/65.  THIS IS A
;COMPILE-INTERPRET SYSTEMS INVOKED AGAINST A SOURCE FILE OF TYPE .BAS.  THE
;COMPILER PRODUCES AN INTERMEDIATE CODE FILE OF TYPE .INT WHICH IS EXECUTED
;BY THE PROGRAM RUN.
;EXTERNAL REFERENCES
BOOT	=	$100		;BOOT ENTRY
PEM	=	$103		;PEM ENTRY
FCB	=	$107		;DEFAULT FCB
TEA	=	$800		;LOAD ADDRESS
;FIXED PARAMETERS AND CONSTANTS
;CAUTION: WHEN A REGISTER IS SET TO TRUE, Z IS SET TO 0 (I.E. NE).  IF A
;REGISTER IS SET TO FALSE THEN Z IS SET TO 1 (I.E. EQ).
TRUE	=	$FF
FALSE	=	0
;ASCII CHARACTERS
TAB	=	9		;TAB
LF	=	10		;LINEFEED
CR	=	13		;RETURN AND EOL
EOF	=	26		;EOF CHAR
SPACE	=	32		;ASCII BLANK
SEMICO	=	59		;SEMICOLON
BACKSL	=	92		;BACKSLASH
;OTHER
IDNTSZ	=	32		;MAX IDENTIFIER SIZE + 1
VARCSZ	=	100		;VARC STACK SIZE
PSTKSZ	=	32		;PARSE STACK SIZE
SRCRSZ	=	128		;SOURCE FILE RECORD SIZE
INTRSZ	=	128		;INT FILE RECORD SIZE
CBUFSZ	=	82		;CONSOLE BUFFER SIZE
HSHTSZ	=	64		;HASH TABLE SIZE
HSHMSK	=	HSHTSZ-1	;HASHING MASK
MAXOCT	=	15		;MAX NUMBER ON STATEMENTS
MAXRWL	=	9		;MAX RESERVED WORD LENGTH
MAXRNO	=	120		;MAX READ COUNT
MAXLNO	=	175		;MAX LOOK COUNT
MAXPNO	=	189		;MAX PUSH COUNT
MAXSNO	=	341		;MAX STATE COUNT
STARTS	=	121		;START STATE
PRODNO	=	152		;NUMBER PRODUCTIONS
SIMVAR	=	0
SUBVAR	=	2
CONST	=	4
LABLE	=	8
UNFUNC	=	$A
;MNEMONICS FOR BASIC-E MACHINE
FAD	=	0
FMI	=	1
FMU	=	2
FDI	=	3
EXP	=	4
LSS	=	5
GTR	=	6
EQU	=	7
NEQ	=	8
GEQ	=	9
LEQ	=	10
NOT	=	11
ANDO	=	12
BOR	=	13
LOD	=	14
STO	=	15
XIT	=	16
DEL	=	17
DUP	=	18
XCH	=	19
STD	=	20
SLT	=	21
SGT	=	22
SEQ	=	23
SNE	=	24
SGE	=	25
SLE	=	26
STS	=	27
ILS	=	28
CAT	=	29
PRO	=	30
RTN	=	31
ROW	=	32
SUB	=	33
RDV	=	34
WRV	=	35
WST	=	36
RDF	=	37
RDB	=	38
ECR	=	39
POT	=	40
WRB	=	40
RDN	=	41
RDS	=	42
WRN	=	43
WRS	=	44
OPN	=	45
CON	=	46
RST	=	47
NEG	=	48
RES	=	49
NOPO	=	50
DAT	=	51
DBF	=	52
NSP	=	53
BRS	=	54
BRC	=	55
BFC	=	56
BFN	=	57
CVB	=	58
RCN	=	59
DRS	=	60
DRF	=	61
EDR	=	62
EDW	=	63
CLS	=	64
IRN	=	77
RON	=	91
CKO	=	92
EXR	=	93
DEF	=	94
BOL	=	95
ADJ	=	96
;TOKEN DEFINITIONS
POUND	=	12
ASTRK	=	4
LESST	=	1
EXPON	=	14
TDATA	=	99
TELSE	=	34
TFOR	=	28
TIF	=	17
TNEXT	=	37
SLASH	=	8
TOR	=	21
TREST	=	48
TSTOP	=	40
FUNCT	=	53
TLEQ	=	18
TNE	=	19
TOUT	=	31
IDENT	=	52
UDFUNC	=	54
LPARN	=	2
TPLUS	=	3
TCOLIN	=	11
EQUAL	=	13
TAND	=	24
TDEF	=	25
TEND	=	27
TGOSB	=	43
TINPT	=	44
TNOT	=	30
TPRNT	=	45
TRETN	=	46
TTHEN	=	41
TGEQ	=	15
COMMA	=	9
TCLOS	=	42
TIRN	=	51
RPARN	=	5
TMINUS	=	7
SCOLN	=	6
GTRT	=	10
TCR	=	23
TDIM	=	26
TFILE	=	35
TGOTO	=	36
TLET	=	29
TON	=	20
TREAD	=	38
TSTEP	=	39
TTO	=	22
TSUB	=	32
TGO	=	16
TXOR	=	33
STRING	=	50
FLOTPT	=	49
TREM	=	0
;PAGE ZERO VARIABLES
;ALL NON-ZERO INITIAL VALUES ARE SHOWN AS I=XXXX WHERE XXXX IS THE INITIAL
;VALUE. PL/M NAME IS SHOWN IF SIGNIFICANTLY DIFFERENT.
GPIND	=$02			;INDEX IN GETCHR
ERRCNT	=$03			;ERROR COUNT (ERRORCOUNT)
DATACT	=$05			;COUNT DATA AREA SIZE
INPSTM	=$07			;(INPUTSTMT)
GSBSTM	=$08			;(GOSUBSTMT)
TOKEN	=$09			;TYPE OF TOKEN
SUBTYP	=$0A			;SUBTYPE OF TOKEN (SUBTYPE)
FUNCOP	=$0B			;FUNCTION NUMBER IF FUNCTION
HSHCDE	=$0C			;HASH OF CURRENT TOKEN (HASHCODE)
NXTCHR	=$0D			;CURRENT CHAR FROM GETCHR (NEXTCHAR)
ACCUM	=$0E			;CURRENT TOKEN
ACCLEN	=	ACCUM		;LENGTH IS FIRST BYTE
CONT	=$2E			;ACCUM FULL FLAG
COLUMN	=$2F			;CURRENT COLUMN
LINENO	=$30			;CURRENT LINE NUMBER
OUTIND	=$32			;INT BUFFER INDEX (BUFFPTR)
LENGTH	=$33			;OUTPUT LINE LENGTH
SEPRTR	=$34			;SEPARATOR I=':'
SRCIND	=$35			;SOURCE INDEX I=SRCRSZ (SOURCEPTR)
LNEPTR	=$36			;LINE POINTER
POINTR	=$37			;POINTER IN ERROR
ERRCDE	=$38			;COMPILER ERROR CODE
STATE	=$39			;STATE
SP		=$3B			;STACK POINTER
MP		=$3C			;
MPP1	=$3D			;MP + 1
NOLOOK	=$3E			;
VARIND	=$3F			;INDEX INTO VAR
TYPESP	=$40			;GROUP OF
TYPEM1	=$41			;VARIABLES
TYPEMP	=$42			;TO HOLD
STYPSP	=$43			;PARSER STACK
STYPM1	=$44			;CONTENTS
STYPMP	=$45			;DURING
SYMLSP	=$46			;ACTION
SYMLM1	=$48			;OF SYNTHESIZE
SYMLMP	=$4A			;IN
HASHSP	=$4C			;ORDER TO
HASHM1	=$4D			;REDUCE
HASHMP	=$4E			;THE AMOUNT
SRLOSP	=$4F			;OF INDEXING
SRLOMP	=$51			;IN SYNTHE
DECOUT	=$53			;DECIMAL WORD
LZFLAG	=$55			;LEADING ZERO FLAG IN PRNDEC
FIELD	=$56			;POINTER IN COMPARE
I		=$58			;PARSER VAR
J		=$5A			;SAME
K		=$5C			;EVEN MORE
INDEX	=$5E			;
I2		=$5F			;I*2 AND WORD POINTER
IC		=$61			;INDEX IN COMPAR
PTR	=$62			;POINTER IN LOOKUP AND COMPAR
IL		=$64			;INDEX IN LOOKUP
SBTTOP	=$65			;TOP OF FOR/NEXT STACK
BASE	=$67			;BASE OF CURRENT ENTRY
FORCNT	=$69			;FOR COUNT
SBTBL	=$6A			;TOP OF SYMBOL TABLE
APTADD	=$6C			;UTILITY VAR TO ACCESS TABLE
PRTCT	=$6E			;COUNT PRT ENTRIES
FDACT	=$70			;COUNT FDA ENTRIES
CODESI	=$72			;COUNT SIZE OF CODE AREA
ULERFL	=$74			;
PRNTNM	=$75			;POINTER SET BEFORE SLOOKU OR ENTER
SYMHSH	=$77			;HASH OF TOKEN REFERENCE
PRODCT	=$78			;PRODUCTION NUMBER (0 TO PRODNO)
NXSTPT	=$79			;NEXT STATEMENT POINTER
TMPHSH	=$7B			;LOCAL HASH IN GETHSH
TMPPTR	=$7C			;LOCAL PTR IN GETHSH
LEN	=$7D			;TEMP IN SLOOKU
NUMPRM	=$7E			;TEMP IN UNLINK/RELINK
LINKI	=$7F			;TEMP IN UNLINK/RELINK
TMPADR	=$80			;TEMP IN UNLINK/RELINK
WHERE	=$82			;TEMP IN GENILS
STRPTR	=$84			;TEMP IN GINILS
IGEN	=$85			;TEMP IN GENCON
LZ		=$86			;
;ENTRY POINT
	*=	TEA
	JMP	MAIN
;COPYRIGHT NOTICE
	.BYTE	"COPYRIGHT - RICHARD"
	.BYTE	" A. LEARY - 2008"
;SUBROUTINES
;SUBROUTINE TO POINT TO SOURCE FCB AND GO TO PEM
RFCBX	LDA	#(FCB & $FF)	;POINT
	LDY	#((FCB / $100)& $FF);TO FCB
	JMP	PEM		;AND GO
;POINT TO INT FCB AND GO TO PEM
WFCBX	LDA	#(WFCB & $FF)		;POINT
	LDY	#((WFCB / $100)& $FF)		;TO FCB
	JMP	PEM		;AND GO
;SEND CR AND LF TO CONSOLE/LIST
CRLF	LDA	#CR		;GET
	JSR	PRNCHR		;A CR
	LDA	#LF		;AND
	JMP	PRNCHR		;THEN A LF
;OUTPUT CHAR IN A TO CONSOLE OR LIST DEVICE AS A FUNCTION OF LSTFLG
SPCOUT	LDA	#SPACE		;GET SPACE
CHROUT	BIT	LSTFLG		;TEST FLAG
	BMI	*+7		;USE LIST IF SET
	LDX	#2		;ELSE SET
	JMP	PEM		;AND DO CONSOLE
	LDX	#5		;SET LIST
	JMP	PEM		;AND DO
;PRINT CHAR IN A AND HANDLE TABS AND LINEFEEDS
PRNCHR	CMP	#TAB		;SEE IF TAB
	BNE	NOTTAB		;BRANCH IF NOT
TABOVR	JSR	SPCOUT		;SEND A SPACE
	INC	COLUMN		;BUMP COLUMN
	LDA	COLUMN		;GET IT
	AND	#7		;SEE IF MOD 8
	BNE	TABOVR		;LOOP IF NOT
	RTS			;ELSE DONE
NOTTAB	PHA			;SAVE CHAR
	JSR	CHROUT		;SEND IT
	INC	COLUMN		;BUMP COLUMN
	PLA			;GET CHAR
	CMP	#LF		;IF A LF
	BEQ	*+3		;THEN BRANCH
	RTS			;ELSE DONE
	LDA	#0		;CLEAR COLUMN
	STA	COLUMN		;AND THEN
	RTS			;DONE
;CONVERT AY TO DECIMAL NUMBER AND PRINT ON CONSOLE
PRNDEC	STA	DECOUT		;SAVE
	STY	DECOUT+1	;VALUE
	LDA	#FALSE		;SET FLAG
	STA	LZFLAG		;TO FALSE
	LDX	#'0'-1		;SET DIGIT TO '0' - 1
	SEC			;NOW
P10000	LDA	DECOUT		;SUBTRACT
	SBC	#(10000*256/256) & $ff	;10000
	STA	DECOUT		;FROM
	LDA	DECOUT+1	;VALUE
	SBC	#10000/256	;AND
	STA	DECOUT+1	;SAVE
	INX			;BUMP DIGIT
	BCS	P10000		;LOOP IF NO BORROW
	LDA	DECOUT		;ELSE
	ADC	#(10000*256/256) & $ff	;ADD
	STA	DECOUT		;10000
	LDA	DECOUT+1	;BACK
	ADC	#10000/256	;IN TO
	STA	DECOUT+1	;CORRECT
	JSR	DIGOUT		;SEND DIGIT
P1000	LDA	DECOUT		;NOW
	SBC	#(1000*256/256) & $ff	;DROP
	STA	DECOUT		;BY
	LDA	DECOUT+1	;1000
	SBC	#1000/256	;UNTIL
	STA	DECOUT+1	;A BORROW
	INX			;BUMP DIGIT
	BCS	P1000		;LOOP IF MORE
	LDA	DECOUT		;NOW
	ADC	#(1000*256/256) & $ff	;ADD
	STA	DECOUT		;1000
	LDA	DECOUT+1	;BACK
	ADC	#1000/256	;IN TO
	STA	DECOUT+1	;CORRECT
	JSR	DIGOUT		;SEND 1000S
P100	LDA	DECOUT		;NOW
	SBC	#100		;DO
	STA	DECOUT		;SUBTRACT
	LDA	DECOUT+1	;FOR
	SBC	#0		;100
	STA	DECOUT+1	;WITH
	INX			;DIGIT BUMP
	BCS	P100		;LOOP IF MORE
	LDA	DECOUT		;ELSE
	ADC	#100		;ADD BACK
	STA	DECOUT		;TO CORRECT
	JSR	DIGOUT		;SEND 100S
P10	LDA	DECOUT		;NOW
	SBC	#10		;DROP
	STA	DECOUT		;BY 10
	INX			;BUMP DIGIT
	BCS	P10		;LOOP IF MORE
	ADC	#10		;CORRECT
	STA	DECOUT		;SAVE
	JSR	DIGOUT		;AND SEND 10S
	LDA	#'0'		;GET ZERO
	ORA	DECOUT		;ADD NUMBER
	JMP	PRNCHR		;AND PRINT ALWAYS
;SEND A SINGLE DIGIT IN X AND HANDLE LEADING ZEROS
DIGOUT	LDA	#SPACE		;PRESET FOR BLANK
	BIT	LZFLAG		;TEST FLAG
	BMI	D2		;BRANCH IF SET
	CPX	#'0'		;ELSE TEST CURRENT
	BEQ	D3		;BRANCH IF '0'
	LDA	#TRUE		;ELSE SET
	STA	LZFLAG		;FLAG
D2	TXA			;GET CHAR
D3	JSR	PRNCHR		;PRINT IT
	LDX	#'0'-1		;NOW PRESET
	SEC			;FOR NEXT
	RTS
;PRINT MESSAGE POINTED TO BY AY UNTIL A $ IS ENCOUNTERED
PRNMSG	STA	PRN0+1		;SAVE MESSAGE
	STY	PRN0+2		;ADDRESS
PRN0	LDA	$FFFF		;GET BYTE
	CMP	#'$'		;SEE IF END
	BNE	*+3		;BRANCH IF NOT
	RTS			;ELSE DONE
	JSR	PRNCHR		;PRINT IT
	INC	PRN0+1		;BUMP LOW
	BNE	PRN0		;LOOP IF NO CARRY
	INC	PRN0+2		;BUMP HIGH
	JMP	PRN0		;AND LOOP
;DISK ERROR EXIT
DSKERR	LDA	#(DEMSG & $FF)		;POINT TO
	LDY	#((DEMSG / $100)& $FF)		;MESSAGE
DSKER0	JSR	PRNMSG		;PRINT IT
	JMP	BOOT		;AND BOOT
;OPEN SOURCE FILE
OPNSRC	LDX	#3		;FIRST
OPN1	LDA	BASSTR-1,X	;MOVE
	STA	FCB+8,X		;BAS TO
	DEX			;TYPE PART
	BNE	OPN1		;OF FCB
	STX	FCB+12		;CLEAR EXTENT
	STX	FCB+13
	STX	FCB+32		;AND RECORD
	LDA	#(INPBUF & $FF)	;POINT TO
	LDY	#((INPBUF / $100)& $FF)	;BUFFER
	LDX	#26		;AND SET
	JSR	PEM		;AS BUFFER LOCATION
	LDX	#15		;OPEN CODE
	JSR	RFCBX		;DO IT
	BMI	*+3		;BRANCH IF BAD
	RTS			;ELSE DONE
	LDA	#(NSMSG & $FF)		;POINT TO
	LDY	#((NSMSG / $100)& $FF)		;NO SOURCE MESSAGE
	JMP	DSKER0		;SEND AND QUIT
;CLOSE OUTPUT (INT) FILE
CLSINT	LDX	#16		;CLOSE CODE
	JSR	WFCBX		;DO IT
	BMI	*+3		;BRANCH IF BAD
	RTS			;ELSE DONE
	JMP	DSKERR		;ERROR EXIT
;SET-UP INT FILE
SUPINT	BIT	NINTFL		;TEST NO-INT FLAG
	BPL	*+3		;BRANCH IF FALSE
	RTS			;ELSE DONE
	LDX	#8		;MOVE 9
SUP0	LDA	FCB,X		;CHAR INCLUDING DRIVE
	STA	WFCB,X		;TO WRITE FCB
	DEX			;DROP COUNT
	BPL	SUP0		;LOOP IF MORE
	INX
	STX	WFCB+12
	STX	WFCB+13
	STX	WFCB+32		;CLEAR EXTENT AND RECORD
	LDX	#19		;NOW DELETE
	JSR	WFCBX		;IT IF THERE
	LDX	#22		;NOW TRY
	JSR	WFCBX		;TO CREATE
	BPL	*+5		;BRANCH IF OK
	JMP	DSKERR		;ELSE ERROR
	RTS			;AND QUIT
;RESET COMPILER FLAGS
SETFLG	LDA	#FALSE
	STA	RNDFLE		;RANDOM FILE
	STA	FILEIO		;FILE IO
	STA	INPSTM		;INPUT STATEMENT
	STA	FORSTM		;FOR STATEMENT
	STA	GSBSTM		;GOSUB STATEMENT
	RTS
;WRITE INT RECORD
WRTINT	BIT	NINTFL		;TEST FLAG
	BPL	*+3		;OK IF FALSE
	RTS			;ELSE DONE
	LDA	#(OUTBUF & $FF)	;POINT TO
	LDY	#((OUTBUF / $100)& $FF)	;BUFFER
	LDX	#26		;AND SET
	JSR	PEM		;AS DMA
	LDX	#21		;NOW DO
	JSR	WFCBX		;WRITE OP
	BEQ	*+5		;OK IF ZERO
	JMP	DSKERR		;ELSE ERROR
	LDA	#(INPBUF & $FF)	;POINT BACK
	LDY	#((INPBUF / $100)& $FF)	;TO INPUT
	LDX	#26		;AND SET
	JMP	PEM		;AS DEFAULT
;EMIT BYTE IN A TO INT FILE
EMIT	LDX	OUTIND		;GET INDEX
	BPL	EMIT0		;OK IF < 128
	PHA			;ELSE SAVE
	JSR	WRTINT		;WRITE BUFFER
	PLA			;GET BYTE
	LDX	#0		;NOW CLEAR
	STX	OUTIND		;INDEX
EMIT0	INC	OUTIND		;BUMP FOR NEXT
	STA	OUTBUF,X	;SAVE BYTE
	RTS			;AND DONE
;READ SOURCE FILE RECORD
RDESRC	LDX	#20		;GET CODE
	JSR	RFCBX		;DO IT
	CMP	#2		;SEE IF OK
	BCC	*+5		;BRANCH IF WAS
	JMP	DSKERR		;ELSE ERROR
	RTS
;CLEAR OUTPUT LINE BUFFER
CLLNBF	LDX	#CBUFSZ-1	;GET LENGTH - 1
	LDA	#SPACE		;USE SPACE
CLLN0	STA	CONBUF,X	;STORE
	DEX			;DROP INDEX
	CPX	#255		;SEE IF WRAP
	BNE	CLLN0		;LOOP IF NOT
	RTS
;LIST LINE OF LENGTH LENGTH
;NOTE THAT THIS ROUTINE ALSO SETS SEPRTR TO : (JUST IN CASE!!)
LSTLNE	LDA	LINENO		;GET LINE
	LDY	LINENO+1	;NUMBER
	JSR	PRNDEC		;PRINT IT
	LDA	SEPRTR		;THEN PRINT
	JSR	PRNCHR		;SEPARATOR
	LDA	#SPACE		;AND A
	JSR	PRNCHR		;SPACE
	LDA	#0		;NOW CLEAR
	STA	GPIND		;INDEX
LSTL0	LDX	GPIND		;GET INDEX
	LDA	CONBUF,X	;GET CHAR
	JSR	PRNCHR		;PRINT IT
	INC	GPIND		;BUMP INDEX
	LDA	GPIND		;GET INDEX
	CMP	LENGTH		;COMPARE TO LENGTH
	BCC	LSTL0		;LOOP IF MORE
	BEQ	LSTL0		;OR IF SAME
	JSR	CRLF		;DO CR AND LF
	JSR	CLLNBF		;CLEAR BUFFER
	LDA	#':'		;AND SET
	STA	SEPRTR		;SEPARATOR
	RTS
;SET GLOBAL VARIABLE NXTCHR TO NEXT SOURCE FILE CHARACTER AND RETURN WITH
;NXTCHR IN A. REPLACE TAB WITH SPACE AND IF LSTSRC IS TRUE OR AN ERROR
;OCCURS SEND THE LINE TO THE CONSOLE.
GETCHR	JSR	CHKFLE		;GO GET CHAR
	BNE	GETEOF		;BRANCH IF EOF
	LDA	NXTCHR		;GET NEXTCHAR
	CMP	#EOF		;SEE IF EOF CHAR
	BNE	NTEOF		;BRANCH IF NOT
GETEOF	LDX	#4		;MOVE 5
GETE0	LDA	ADDEND,X	;FROM ADDEND
	STA	INPBUF,X	;TO INPUT BUFFER
	DEX			;DROP COUNT
	BPL	GETE0		;LOOP IF MORE
	INX			;CLEAR X
	STX	SRCIND		;AND THEN INDEX
	JSR	NXTSRC		;GET NEXT
	STA	NXTCHR		;SAVE IT
NTEOF	LDX	LNEPTR		;GET POINTER
	CPX	#CBUFSZ		;COMPARE TO MAX
	BCS	LTOBIG		;BRANCH IF TOO BIG
	INX			;ELSE BUMP
	STX	LNEPTR		;AND SAVE
	LDA	NXTCHR		;GET CHAR
	STA	CONBUF,X	;AND SAVE
LTOBIG	LDA	NXTCHR		;GET CHAR
	CMP	#CR		;SEE IF A CR
	BNE	NTEOL		;BRANCH IF NOT
	INC	LINENO		;ELSE BUMP
	BNE	*+4		;LINE
	INC	LINENO+1	;NUMBER
	LDX	LNEPTR		;GET POINTER
	DEX			;DROP IT
	STX	LENGTH		;PUT IN LENGTH
	LDA	LSTSRC		;GET FLAG
	BEQ	NOLSLN		;BRANCH IF NOT TRUE
	JSR	LSTLNE		;LIST IT
NOLSLN	LDA	#0		;THEN CLEAR
	STA	LNEPTR		;POINTER
	LDA	NXTCHR		;GET CHAR
NTEOL	CMP	#TAB		;SEE IT TAB
	BEQ	*+3		;BRANCH IF IS
	RTS
	LDA	#SPACE		;ELSE GET SPACE
	STA	NXTCHR		;SET
	RTS			;AND DONE
;GET BYTE FROM SOURCE FILE
NXTSRC	LDX	SRCIND		;GET INDEX
	LDA	INPBUF,X	;THEN BYTE
	RTS
;MAINTAIN SOURCE BUFFER FULL AND CHECK FOR EOF. IF EOF IS DETECTED THEN
;A:=TRUE ELSE A:=FALSE
CHKFLE	INC	SRCIND		;BUMP INDEX
	BPL	CHKFL0		;BRANCH IF OK
	LDA	#0		;ELSE CLEAR
	STA	SRCIND		;INDEX
	JSR	RDESRC		;READ RECORD
	CMP	#1		;SEE IF EOF
	BNE	CHKFL0		;BRANCH IF NOT
	LDA	#TRUE		;ELSE SET
	RTS			;EOF=TRUE
CHKFL0	JSR	NXTSRC		;GET NEXT
	STA	NXTCHR		;SAVE IT
	CMP	#LF		;IF A LF
	BEQ	CHKFLE		;LOOP FOR MORE
	LDA	#FALSE		;ELSE SAY
	RTS			;WASN'T EOF
;GET NON-BLANK FROM SOURCE. WILL ALSO SKIP PAST EOF TO REACH PHYSICAL EOF.
GTNBLK	JSR	GETCHR		;GET NEW CHAR
	CMP	#SPACE		;IF A SPACE
	BEQ	GTNBLK		;TRY AGAIN
	CMP	#EOF		;IF AN EOF
	BEQ	GTNBLK		;TRY AGAIN
	RTS
;CHECK FOR CONTINUATION CHARACTER. IF IT IS WILL GET FIRST CHAR FROM NEXT LINE.
CHKCNT	LDA	NXTCHR		;GET NEXT
	CMP	#BACKSL		;SEE IF CONTINUE
	BEQ	*+3		;BRANCH IF IS
	RTS
CHKCN0	JSR	GETCHR		;GET NEXT
	CMP	#CR		;SEE IF EOL
	BNE	CHKCN0		;LOOP IF ISN'T
	JMP	GTNBLK		;NOW GET FIRST NON-BLANK
;COMPILER ERROR HANDLER
;AT ENTRY A CONTAINS ERROR NUMBER
ERROR	STA	ERRCDE		;SAVE
	LDA	LNEPTR		;GET INDEX
	STA	POINTR		;MOVE TO POINTER
	INC	POINTR		;AND BUMP
	INC	POINTR		;BY TWO
	LDA	TOKEN		;GET TOKEN
	CMP	#TCR		;SEE IF FOR EOL
	BEQ	ERROR3		;BRANCH IF IS
	LDA	NXTCHR		;ELSE GET NEXT
ERROR1	CMP	#CR		;IF A CR
	BEQ	ERROR3		;THEN DONE
	JSR	CHKCNT		;ELSE SEE IF CONTINUE
	JSR	GETCHR		;GET ANOTHER CHAR
	JMP	ERROR1		;AND LOOP
ERROR3	BIT	PASS2		;TEST PASS 2 FLAG
	BPL	ERROR6		;BRANCH IF CLEAR
	BIT	LSTSRC		;SEE IF SOURCE ALREADY LISTED
	BMI	*+5		;SKIP LIST IF WAS
	JSR	LSTLNE		;ELSE LIST
	INC	ERRCNT		;BUMP
	BNE	*+4		;ERROR
	INC	ERRCNT+1	;COUNT
	LDA	#'?'		;PRINT A ?
	JSR	PRNCHR
	LDA	#'-'
	JSR	PRNCHR		;PRINT TWO -
	LDA	#'-'
	JSR	PRNCHR
ERROR4	DEC	POINTR		;DROP POINTER
	BEQ	ERROR5		;DONE IF ZERO
	BMI	ERROR5		;OR <0
	LDA	#'-'		;ELSE GET -
	JSR	PRNCHR		;PRINT IT
	JMP	ERROR4		;AND LOOP
ERROR5	LDA	#'^'		;GET UP ARROW
	JSR	PRNCHR		;PRINT IT
	JSR	CRLF		;THEN A CR AND LF
	LDA	ERRCDE		;GET ERROR CODE
	ASL	A		;MULT BY TWO
	TAX
	LDA	ERMTBL,X
	LDY	ERMTBL+1,X	;GET MESSAGE ADDRESS
	JSR	PRNMSG		;PRINT IT
	JSR	CRLF
ERROR6	LDA	#FALSE		;NOW CLEAR
	STA	CMPLNG		;COMPILING FLAG
	JMP	SETFLG		;AND THEN OTHER FLAGS
;INITIALIZE SCANNER BY SETTING NXTCHR TO THE FIRST NON-BLANK CHARACTER FROM THE
;INPUT FILE AND BY SETTING THE LINE NUMBER AND POINTER
INSCAN	BIT	PASS1		;TEST FOR PASS 1
	BPL	NOGTPR		;BRANCH IF NOT
	LDX	#8		;MOVE 8 PARMS
INSCA0	LDA	FCB+16,X	;FROM FCB
	STA	PRMLST-1,X	;TO SAVE AREA
	DEX			;DROP COUNT
	BNE	INSCA0		;LOOP IF MORE
NOGTPR	JSR	OPNSRC		;OPEN FILE
	LDA	#0		;NOW
	STA	CONT		;CLEAR
	STA	COLUMN		;VARIABLES
	STA	LINENO		;FOR START
	STA	LINENO+1	;OF A
	STA	LNEPTR		;PASS
	JSR	CLLNBF		;CLEAR OUTPUT BUFFER
	LDA	#SRCRSZ		;NOW SET SOURCE
	STA	SRCIND		;INDEX TO INVALID
	LDA	#':'		;SET SEPARATOR
	STA	SEPRTR		;TO A COLON
	LDA	PRMLST		;GET FIRST PARM
	CMP	#'$'		;SEE IF START
	BNE	INSDNE		;NOT SO EXIT
	LDX	#1		;SET INDEX TO FIRST
INSCAP	LDA	PRMLST,X	;GET PARM
	INX			;BUMP INDEX
	CMP	#SPACE		;IF NOT A SPACE
	BEQ	INSDNE		;DONE IF SPACE
	LDY	#TRUE		;SET TRUE
	CMP	#'A'		;IF NOT A
	BNE	PNOTA		;TRY NEXT
	STY	LSTPRD		;ELSE SET
	BEQ	INSCAP		;AND LOOP
PNOTA	CMP	#'C'		;IF NOT C
	BNE	PNOTC		;TRY NEXT
	STY	NINTFL		;ELSE SET
	BEQ	INSCAP		;AND LOOP
PNOTC	CMP	#'E'		;SEE IF E
	BNE	PNOTE		;BRANCH IF NOT
	STY	DEBUGL		;ELSE SET
	BEQ	INSCAP		;AND LOOP
PNOTE	CMP	#'F'		;SEE IF F
	BNE	PNOTF		;BRANCH IF NOT
	STY	LSTFLG		;ELSE SET
	BEQ	INSCAP		;AND LOOP
PNOTF	LDY	#FALSE		;NOW USE FALSE
	CMP	#'B'		;IF NOT B
	BNE	PNOTB		;TRY NEXT
	STY	LSTSRC		;ELSE SET
	BEQ	INSCAP		;AND LOOP
PNOTB	CMP	#'D'		;IF NOT D
	BNE	INSCAP		;THEN NOT VALID
	STY	LWRUPR		;ELSE SET
	BEQ	INSCAP		;AND LOOP
;DONE WITH INSCAN SO GET FIRST NON-BLANK
INSDNE	LDA	#0		;CLEAR EOL FLAG
	STA	EOLSTS
	JMP	GTNBLK
;PUT NXTCHR IN ACCUM
PUTACC	BIT	CONT		;TEST FOR CONTINUE
	BPL	*+3		;DO IF NOT
	RTS			;ELSE DONE
	INC	ACCLEN		;BUMP LENGTH
	LDX	ACCLEN		;GET IT AS INDEX
	LDA	NXTCHR		;GET NEXT
	STA	ACCUM,X		;STORE IT
	CLC			;CLEAR CARRY
	ADC	HSHCDE		;ADD HASHCDE
	AND	#HSHMSK		;MASK IT
	STA	HSHCDE		;AND SAVE
	CPX	#IDNTSZ-1	;COMPARE TO MAX
	BCS	*+3		;BRANCH IF TOO BIG
	RTS			;ELSE DONE
	LDA	#TRUE		;SET CONT
	STA	CONT		;FLAG
	RTS
;PUT NXTCHR IN ACCUM AND GET ANOTHER NON-BLANK
PUTGET	JSR	PUTACC		;PUT
	JMP	GTNBLK		;AND GET
;PUT NXTCHR IN ACCUM AND GET ANOTHER CHAR
PUTCHR	JSR	PUTACC		;PUT
	JMP	GETCHR		;AND GET
;TEST FOR NUMERIC NXTCHR. RETURN WITH A:=TRUE IFF NXTCHR IN '0' TO '9'
NUMRIC	LDA	NXTCHR		;GET CHAR
	CMP	#'0'		;SEE IF LESS THAN 0
	BCC	NOTNUM		;BRANCH IF IS
	CMP	#'9'+1		;SEE IF OVER 9
	BCS	NOTNUM		;BRANCH IF IS
	LDA	#TRUE		;ELSE SET
	RTS			;FOR NUMERIC
NOTNUM	LDA	#FALSE		;SET FALSE
	RTS
;TEST FOR LOWER CASE NXTCHR. RETURN WITH A:=TRUE IFF NXTCHR IN 'A' TO 'Z'
LWRCSE	LDA	NXTCHR		;GET CHAT
	CMP	#'A'		;SEE IF < A
	BCC	NOTLWR		;BRANCH IF IS
	CMP	#'Z'+1		;SEE IF > Z
	BCS	NOTLWR		;BRANCH IF IS
	LDA	#TRUE		;ELSE 
	RTS			;IS LOWER
NOTLWR	LDA	#FALSE		;NOT LOWER
	RTS
;TEST FOR NXTCHR A DECIMAL POINT
DCMLPT	LDA	NXTCHR		;GET CHAR
	CMP	#'.'		;TEST IT
	BNE	NTDCML		;BRANCH IF NOT
	LDA	#TRUE		;SET FOR TRUE
	RTS
NTDCML	LDA	#FALSE		;FALSE
	RTS
;CONVERT LOWERCASE TO UPPERCASE
CNVLWR	JSR	LWRCSE		;SEE IF LOWER
	AND	LWRUPR		;AND WITH FLAG
	BNE	*+3		;OK IF BOTH TRUE
	RTS			;ELSE DONE
	LDA	NXTCHR		;GET CHAR
	AND	#$5F		;CONVERT
	STA	NXTCHR		;AND SAVE
	RTS
;TEST FOR LETTER. SET A:=TRUE IF LOWERCASE OR UPPERCASE LETTER
LETTER	JSR	CNVLWR		;COVERT IF ALL SET
	JSR	LWRCSE		;SEE IF STILL LOWERCASE
	BEQ	*+3		;BRANCH IF NOT
	RTS			;ELSE IS TRUE
	LDA	NXTCHR		;GET CHAR
	CMP	#'A'		;IF < A
	BCC	NOTLTR		;IS NOT LETTER
	CMP	#'Z'+1		;IF > Z
	BCS	NOTLTR		;IS NOT LETTER
	LDA	#TRUE		;ELSE IS
	RTS
NOTLTR	LDA	#FALSE		;NOT LETTER
	RTS
;TEST FOR LETTER, NUMBER OR DECIMAL POINT. RETURN A:=TRUE IF EITHER
ALPNUM	JSR	LETTER		;FIRST TRY LETTER
	BEQ	*+3		;BRANCH IF NOT
	RTS
	JSR	NUMRIC		;NOW TRY NUMBER
	BEQ	*+3		;BRANCH IF NOT
	RTS
	JMP	DCMLPT		;FINALLY TRY DECIMAL POINT
;SPOOL NUMERIC DATA INTO ACCUM
SPLNUM	JSR	NUMRIC		;SEE IF NUMBER
	BNE	*+3		;BRANCH IF IS
	RTS			;ELSE DONE
	JSR	PUTCHR		;STUFF IT
	JMP	SPLNUM		;AND LOOP
;SET UP NEXT CALL
SUPNCL	LDA	NXTCHR		;GET NEXT
	CMP	#SPACE		;SEE IF BLANK
	BNE	*+5		;BRANCH IF NOT
	JSR	GTNBLK		;GET NON-BLANK
	LDA	#FALSE		;SET CONTINUE
	STA	CONT		;TO FALSE
	RTS
;PROCEDURE CALLED BY SYNTHE TO REDUCE THE AMOUNT OF INDEXING
SCOPY	LDX	SP		;GET STACK POINTER
	LDA	TYPE,X		;DO
	STA	TYPESP		;BYTE
	LDA	STYPE,X		;VALUES
	STA	STYPSP		;FIRST
	LDA	HASH,X
	STA	HASHSP
	TXA			;NOW
	ASL	A		;MAKE A
	TAX			;WORD INDEX
	LDA	SYMLOC,X
	LDY	SYMLOC+1,X
	STA	SYMLSP
	STY	SYMLSP+1
	LDA	SRLOC,X
	LDY	SRLOC+1,X
	STA	SRLOSP
	STY	SRLOSP+1
	LDX	MP		;NOW GET MP
	LDA	TYPE,X
	STA	TYPEMP
	LDA	STYPE,X
	STA	STYPMP
	LDA	HASH,X
	STA	HASHMP
	TXA			;NOW
	ASL	A		;MAKE A
	TAX			;WORD INDEX
	LDA	SYMLOC,X
	LDY	SYMLOC+1,X
	STA	SYMLMP
	STY	SYMLMP+1
	LDA	SRLOC,X
	LDY	SRLOC+1,X
	STA	SRLOMP
	STY	SRLOMP+1
	LDX	MPP1		;NOW GET MP+1
	LDA	TYPE,X
	STA	TYPEM1
	LDA	STYPE,X
	STA	STYPM1
	LDA	HASH,X
	STA	HASHM1
	TXA			;NOW
	ASL	A		;MAKE A
	TAX			;WORD INDEX
	LDA	SYMLOC,X
	LDY	SYMLOC+1,X
	STA	SYMLM1
	STY	SYMLM1+1
	RTS
;CALLED BY SYNTHE TO SET SYMLOC(SP) TO AY
STSLSP	PHA			;SAVE A PART
	LDA	SP		;GET SP
STSL	ASL	A		;MULT BY TWO
	TAX			;MAKE INDEX
	PLA			;GET BYTE
	STA	SYMLOC,X	;SAVE IT
	TYA			;GET HIGH
	STA	SYMLOC+1,X	;SAVE IT
	RTS
;CALLED BY SYNTHE TO SET SYMLOC(MP) TO AY
STSLMP	PHA			;SAVE LOW
	LDA	MP		;GET MP
	JMP	STSL		;GO DO
;CALLED BY SYNTHE TO SET TYPE(SP) TO A
STTYSP	LDX	SP		;GET SP
	STA	TYPE,X		;SAVE
	RTS
;CALLED BY SYNTHE TO SET STYPE(SP) TO A
STSTSP	LDX	SP		;GET SP
	STA	STYPE,X		;SAVE
	RTS
;SET STYPE(MP) TO A
STSTMP	LDX	MP		;GET MP
	STA	STYPE,X		;SAVE
	RTS
;SET TYPE(MP) TO A
STTYMP	LDX	MP		;GET MP
	STA	TYPE,X		;SAVE
	RTS
;SET HASH(MP) TO A
STHAMP	LDX	MP		;GET MP
	STA	HASH,X		;INSERT
	RTS
;SET HASH(SP) TO A
STHASP	LDX	SP		;GET SP
	STA	HASH,X		;INSERT
	RTS
;SET SRLOC(SP) TO AY
STSRSP	PHA			;SAVE LOW
	LDA	SP		;GET SP
	ASL	A		;MULT BY TWO
	TAX			;MAKE INDEX
	PLA			;GET LOW
	STA	SRLOC,X		;SAVE IR
	TYA			;GET HIGH
	STA	SRLOC+1,X	;SAVE IT
	RTS
;WRITE GENERATED CODE IN A AND COUNT SIZE OF CODE AREA
GENERT	INC	CODESI		;BUMP
	BNE	*+4		;CODE
	INC	CODESI+1	;SIZE
	BIT	PASS1		;TEST FOR PASS 1
	BMI	*+5		;BRANCH IF
	JMP	EMIT		;ELSE GO EMIT
	RTS
;WRITE DATA IN A DURING PASS 2 AND COUNT SIZE OF DATA AREA
EMITDT	INC	DATACT		;BUMP
	BNE	*+4		;DATA
	INC	DATACT+1	;SIZE
	BIT	PASS2		;TEST FOR PASS 2
	BPL	*+5		;BRANCH IF NOT
	JMP	EMIT		;ELSE GO EMIT
	RTS
;COMPARE ACCUM TO RESERVED WORD STRING
COMPAR	LDA	#0
	STA	IC
COMPA0	LDY	IC
	LDA	(PTR),Y		;A=FIELD(I)
	INC	IC
	LDY	IC		;I=I+1
	CMP	ACCUM,Y		;COMPARE FIELD(I) TO ACCUM(I=I+1)
	BNE	COMPAX		;EXIT IF DIFFERENT
	LDA	ACCLEN
	CMP	IC		;IF I<=ACCLEN
	BCS	COMPA0		;THEN LOOP
COMPAT	LDA	#TRUE		;WAS A MATCH
	RTS
COMPAX	LDA	ACCLEN		;CHECK TERMINATION CONDITION
	CMP	IC
	BCC	COMPAT		;IF I>ACCLEN IS TRUE
	LDA	#FALSE
	RTS
;ATTEMPT TO MATCH RESERVED WORD
LOOKUP	LDA	#MAXRWL		;COMPARE MAX WORD LENGTH
	CMP	ACCLEN		;TO LENGTH
	BCC	LOOKFL		;EXIT AS FALSE IF TOO BIG
	LDX	ACCLEN		;GET LENGTH
	LDA	OFFSET,X	;AND OFFSET
	CLC			;IN RESERVED WORD TABLE
	ADC	#(LNG1 & $FF)		;NOW ADD TO
	STA	PTR		;START TO
	LDA	#0		;GET
	ADC	#((LNG1 / $100)& $FF)		;INDIRECT
	STA	PTR+1		;POINTER
	LDA	#0		;SET INDEX
	STA	IL		;TO ZERO
LOOKU0	INC	IL		;BUMP INDEX
	LDX	ACCLEN		;SEE IF COUNT
	LDA	COUNT,X		;BIGGER THAN
	CMP	IL		;NUMBER WORDS
	BCC	LOOKFL		;NO MATCH IF IS
	JSR	COMPAR		;TRY TO MATCH
	BNE	LOOKMT		;BRANCH IF DID
	CLC			;ELSE
	LDA	PTR		;BUMP
	ADC	ACCLEN		;POINTER
	STA	PTR		;BY LENGTH
	BCC	LOOKU0		;OF WORD
	INC	PTR+1		;AND TRY
	JMP	LOOKU0		;NEXT
LOOKMT	LDX	ACCLEN		;GET LENGTH
	LDA	TKOS,X		;AND TOKEN OFFSET
	CLC			;ADD TO
	ADC	IL		;INDEX
	TAX			;MAKE AN INDEX
	LDA	TK,X		;GET TOKEN
	STA	TOKEN		;AND SAVE
	CMP	#64+1		;SEE IF OVER 64
	BCC	LOOKTR		;BRANCH IF NOT
	CMP	#TDATA		;SEE IF TDATA
	BEQ	LOOKTR		;BRANCH IF IS
	STA	FUNCOP		;ELSE SAVE AS FUNCOP
	SEC			;NOW SUBTRACT
	SBC	#65		;65 TO
	TAX			;MAKE INDEX
	LDA	ST,X		;GET SUBTYPE
	STA	SUBTYP		;AND SAVE
	LDA	#FUNCT
	STA	TOKEN		;TOKEN=FUNCT
LOOKTR	LDA	#TRUE		;MATCH
	RTS
LOOKFL	LDA	#FALSE		;NO MATCH
	RTS
;SCANNER ACCEPTS INPUT CHARACTERS FROM THE SOURCE FILE RETURNING TOKENS TO THE
;PARSER.  CONVERSION TO UPPERCASE IS PERFORMED IF LWRUPR IS SET.  EACH TOKEN IS
;PLACED IN ACCUM AND ACCLEN IS THE LENGTH OF THE TOKEN.  THE TOKEN IS HASHED BY
;SUMMING EACH ASCII CHARACTER MODULO HSHTSZ (HASHTABLESIZE) AND IS STORED IN
;HSHCDE (HASHCODE).  SUBTYP AND FUNCOP ARE SET IF THE TOKEN IS A PREDEFINED
;FUNCTION.  REM AND DATA STATEMENTS ARE HANDLED COMPLETELY BY THE SCANNER. REM
;AND REMARK STATEMENTS CAUSE THE INPUT TO BE SCANNED UNTIL THE END OF THE
;CURRENT INPUT LINE IS LOCATED.  THE CR IS THEN SCANNED AND RETURNED.  DATA
;STATEMENTS ARE SIMILAR EXCEPT DATA IS OUTPUT USING EMITDT.
SCANNR	LDA	#0		;CLEAR
	STA	ACCLEN		;THESE
	STA	HSHCDE		;VARIABLES
	STA	TOKEN		;AT
	STA	SUBTYP		;START
	BIT	CONT		;TEST CONTINUE FLAG
	BMI	SCAN1		;BRANCH IF SET
	BIT	EOLSTS		;TEST EOL STATUS
	BPL	SCAN28		;SKIP IF CHAR READY
	JSR	GTNBLK		;ELSE GO READ
	LDA	#0		;THEN CLEAR FLAG
	STA	EOLSTS
SCAN28	LDA	NXTCHR		;ELSE GET NEXT
	CMP	#'"'		;SEE IF "
	BNE	SCAN5		;BRANCH IF NOT
;FIRST CASE IS STRING OR STRING CONTINUATION
SCAN1	LDA	#STRING		;GET TOKEN
	STA	TOKEN		;AND SET
	LDA	#FALSE		;AND SET
	STA	CONT		;CONT AS FALSE
SCAN2	JSR	GETCHR		;GET CHAR
	CMP	#'"'		;SEE IF DELIMITER
	BEQ	SCAN4		;BRANCH IF IS
	CMP	#CR		;SEE IF EOL
	BNE	SCAN3		;BRANCH IF NOT
	LDA	#22		;ELSE IS UNTERMINATED STRING
	JMP	ERROR		;DO ERROR AND QUIT
SCAN3	JSR	PUTACC		;PUT IN ACCUM
	BIT	CONT		;TEST FOR CONTINUE
	BPL	SCAN2		;LOOP IF NOT
	RTS			;ELSE DONE
SCAN4	JSR	GTNBLK		;GET NON-BLANK
	CMP	#'"'		;SEE IF ANOTHER DELIMITER
	BEQ	*+3		;BRANCH IF IS
	RTS			;ELSE DONE
	JSR	PUTACC		;PUT IN ACCUM
	JMP	SCAN2		;AND LOOP
SCAN5	JSR	NUMRIC		;SEE IF NUMBER
	BNE	SCAN6		;BRANCH IF IS
	JSR	DCMLPT		;SEE IF DECIMAL POINT
	BEQ	SCAN15		;BRANCH IF NOT
;IS A NUMERIC OF UP TO IDNTSZ-1 CHARACTERS
SCAN6	LDA	#FLOTPT		;GET TOKEN
	STA	TOKEN		;AND SET
	LDA	NXTCHR		;GET NEXT CHAR
SCAN7	CMP	#'0'		;SEE IF LEADING ZERO
	BNE	SCAN8		;BRANCH IF NOT
	JSR	GETCHR		;ELSE GET NEXT
	JMP	SCAN7		;AND LOOP TO FLUSH
SCAN8	JSR	SPLNUM		;SPOOL NUMERIC
	JSR	DCMLPT		;TEST FOR DECIMAL POINT
	BEQ	SCAN9		;BRANCH IF NOT
	JSR	PUTCHR		;INSERT IT
	JSR	SPLNUM		;SPOOL REST
SCAN9	JSR	CNVLWR		;CONVERT NEXT TO UPPER
	LDA	NXTCHR		;GET IT
	CMP	#'E'		;SEE IF E FOR EXPONENT
	BNE	SCAN13		;BRANCH IF NOT
	JSR	PUTGET		;ELSE INSERT AND GET ANOTHER
	CMP	#'+'		;IF A +
	BEQ	SCAN10		;GO INSERT AND GET ANOTHER
	CMP	#'-'		;IF NOT A -
	BNE	SCAN11		;SKIP AHEAD
SCAN10	JSR	PUTGET		;INSERT AND GET
SCAN11	JSR	NUMRIC		;TEST FOR NUMBER
	BNE	SCAN12		;BRANCH IF IS
	LDA	#9		;ELSE ILLEGAL FLOATING POINT FORMAT
	JSR	ERROR		;ERROR
SCAN12	JSR	SPLNUM		;SPOOL NUMBERS
SCAN13	LDA	ACCLEN		;GET LENGTH
	BNE	SCAN14		;BRANCH IF NOT ZERO
	INC	ACCLEN		;ELSE BUMP
	LDA	#'0'		;AND INSERT A '0'
	STA	ACCUM+1		;IN ACCUM
	STA	HSHCDE		;AND HASHCODE
SCAN14	JMP	SUPNCL		;SETUPNEXTCALL AND RETURN
SCAN15	JSR	LETTER		;SEE IF LETTER
	BNE	*+5		;CONTINUE IF IS
	JMP	SCAN26		;ELSE GO TO NEXT SECTION
;IS AN IDENTIFIER OR MAY BE REM, REMARK, OR DATA STATEMENTS. THESE TWO ARE
;HANDLED HERE
SCAN16	JSR	ALPNUM		;TEST FOR ALPHANUMERIC
	BEQ	SCAN17		;BRANCH IF NOT
	JSR	PUTCHR		;ELSE INSERT AND GET
	JMP	SCAN16		;AND LOOP
SCAN17	LDA	NXTCHR		;GET NEXT CHAR
	CMP	#'$'		;IF NOT A $
	BNE	SCAN18		;IS FLOATING
	LDA	#STRING		;ELSE SET STRING
	STA	SUBTYP		;AS SUBTYPE
	JSR	PUTCHR		;PUT AND GET
	JMP	SCAN19		;AND CONTINUE
SCAN18	LDA	#FLOTPT		;SET FLOATING
	STA	SUBTYP		;AS SUBTYPE
SCAN19	JSR	LOOKUP		;TRY TO MATCH
	BNE	SCAN21		;BRANCH IF RESERVED
	LDA	ACCUM+1		;CHECK FOR USER
	CMP	#'F'		;DEFINED FUNCTION
	BNE	SCAN20		;BRANCH IF NOT
	LDA	ACCUM+2		;SAME FOR NEXT
	CMP	#'N'		;CHAR IN ACCUM
	BNE	SCAN20
	LDA	ACCLEN		;GET LENGTH
	CMP	#1		;MUST NOT BE 1
	BEQ	SCAN20		;BRANCH IF IS
	LDA	#UDFUNC		;AH!AH! IS FN--
	STA	TOKEN		;SET TOKEN
	JMP	SUPNCL		;EXIT WITH SETUPNEXTCALL
SCAN20	LDA	#IDENT		;IS IDENTIFIER
	STA	TOKEN		;SET TOKEN
	JMP	SUPNCL		;EXIT WITH SETUPNEXTCALL
SCAN21	LDA	TOKEN		;IS A RESERVED
	CMP	#TREM		;SEE IF REM
	BNE	SCAN23		;BRANCH IF NOT
SCAN22	LDA	NXTCHR		;GET NEXT
	CMP	#CR		;SEE IF EOL
	BNE	*+5		;BRANCH IF NOT
	JMP	SCANNR		;ELSE LOOP TO START
	JSR	GETCHR		;GET CHAR
	JSR	CHKCNT		;CHECK FOR CONTINUE
	JMP	SCAN22		;AND LOOP
SCAN23	CMP	#TDATA		;SEE IF DATA
	BEQ	*+5		;BRANCH IF IS
	JMP	SUPNCL		;ELSE SETUPNEXTCALL AND EXIT
	LDA	#DAT		;EMIT DAT OPCODE
	JSR	EMITDT		;TO START
	LDA	NXTCHR		;GET NEXT
	JSR	EMITDT		;EMIT IT
SCAN24	JSR	GETCHR		;GET ANOTHER
	CMP	#CR		;SEE IF EOL
	BEQ	SCAN25		;BRANCH IF IS
	JSR	CHKCNT		;ELSE CHECK FOR CONTINUE
	LDA	NXTCHR		;GET CHAR
	JSR	EMITDT		;EMIT IT
	JMP	SCAN24		;AND LOOP
SCAN25	LDA	#','		;NOW EMIT
	JSR	EMITDT		;A COMMA
	LDA	#0		;AND A
	JSR	EMITDT		;ZERO
	LDA	DATACT		;NOW
	BNE	*+4		;DROP
	DEC	DATACT+1	;DATA COUNT
	DEC	DATACT		;BY ONE
	JMP	SCANNR		;AND LOOP TO START
;FINAL CASE IS A SPECIAL CHARACTER -- IT MAY BE CONTINUATION CHAR IN WHICH CASE
;JUST GO TO NEXT LINE AND SCAN SOMEMORE
SCAN26	LDA	NXTCHR		;GET CHAR
	CMP	#BACKSL		;SEE IF CONTINUE
	BNE	SCAN27		;BRANCH IF NOT
	JSR	CHKCNT		;CHECK IT
	JMP	SCANNR		;AND LOOP
SCAN27	JSR	PUTACC		;PUT IN ACCUM
	LDA	NXTCHR		;GET LAST CHAR
	CMP	#CR		;SEE IF EOL
	BNE	SCAN29		;NOT SO SKIP
	LDA	#$FF		;SET FLAG TO READ
	STA	EOLSTS
	BMI	SCAN30		;THEN JUMP AHEAD
SCAN29	JSR	GTNBLK		;GET NON BLANK
SCAN30	JSR	LOOKUP		;SEE IF MATCH
	BEQ	*+3		;BRANCH IF NOT
	RTS			;ELSE DONE
	LDA	#7		;ILLEGAL CHARACTER ERROR
	JMP	ERROR		;AND QUIT
;ADJUST BASE FOR NEXT ENTRY
NXTENT	LDY	#0		;CLEAR INDEX
	LDA	(BASE),Y	;GET NAME LENGTH
	CLC			;NOW
	ADC	BASE		;ADD TO CURRENT
	STA	BASE		;AND UPDATE
	BCC	*+4		;DON'T FORGET
	INC	BASE+1		;CARRY
	CLC			;NOW
	LDA	BASE		;ADD
	ADC	#7		;SEVEN FOR
	STA	BASE		;OVERHEAD
	BCC	*+4		;TO GET
	INC	BASE+1		;NEW BASE
	RTS
;GET LENGTH OF PRINTNAME
GETLEN	LDY	#0		;CLEAR INDEX
	LDA	(BASE),Y	;GET LENGTH
	RTS
;WRITE NUMERIC CONSTANT DURING PASS 1
EMITCN	BIT	PASS1		;TEST FOR PASS 1
	BMI	*+3		;BRANCH IF IS
	RTS			;ELSE DONE
	JMP	EMIT		;WRITE BYTE
;WRITE TWO BYTES OF OBJECT CODE ON DISK FOR LITERALS
GENTWO	PHA			;SAVE LOW
	TYA			;GET HIGH
	JSR	GENERT		;WRITE IT
	PLA			;GET LOW
	JMP	GENERT		;DO IT
;
LITERL	PHA			;SAVE LOW
	TYA			;GET HIGH
	ORA	#$80		;SET MSB
	TAY			;BACK TO Y
	PLA			;GET LOW
	JMP	GENTWO		;SEND IT
;
LITLOD	PHA			;SAVE LOW
	TYA			;GET HIGH
	ORA	#$C0		;OR WITH MASK
	TAY			;BACK TO Y
	PLA			;GET LOW
	JMP	GENTWO		;WRITE IT
;
LINENU	BIT	DEBUGL		;TEST DEBUG FLAG
	BMI	*+3		;BRANCH IF SET
	RTS			;ELSE DO NOTHING
	LDA	LINENO		;GET LOW
	LDY	LINENO+1	;AND HIGH NUMBER
	JSR	LITERL		;SEND AS LITERAL
	LDA	#BOL		;THEN SEND BOL
	JMP	GENERT		;OPCODE
;FILL HASHTABLE WITH 0'S AND INITIALIZE POINTER TO TOP OF SYMBOL TABLE
INSYMT	BIT	PASS1		;SEE IF PASS 1
	BPL	INSYM1		;BRANCH IF NOT
	LDX	#HSHTSZ*2-1	;GET NUMBER TO CLEAR
	LDA	#0		;THEN VALUE
INSYM0	STA	HSHTBL,X	;STORE IT
	DEX			;DROP COUNT
	CPX	#255		;SEE IF WRAP
	BNE	INSYM0		;LOOP IF NOT
	LDA	#(MEMORY & $FF)	;GET MEMORY
	LDY	#((MEMORY / $100)& $FF)	;START
	STA	SBTBL		;AND SET
	STY	SBTBL+1		;TABLE START
INSYM1	LDA	PEM+1		;GET LIMIT
	LDY	PEM+2		;OF MEMORY
	SEC			;DROP
	SBC	#2		;TWO
	STA	SBTTOP		;TO GET
	STA	NXSTPT		;TOP STARTING
	BCS	*+3		;BRANCH IF NO BORROW
	DEY			;ELSE DROP Y
	STY	SBTTOP+1	;SET HIGH
	STY	NXSTPT+1	;AND SET
	LDA	#0		;CLEAR A
	LDY	#1		;SET INDEX TO 1
	STA	(NXSTPT),Y	;PUT IN MEMORY
	RTS
;
GETHSH	LDY	#0		;GET
	LDA	(BASE),Y	;PTR
	STA	TMPPTR		;AND SAVE
	STY	TMPHSH		;CLEAR INTERNAL HASH
	LDA	BASE		;GET
	LDY	BASE+1		;BASE
	CLC			;NOW
	ADC	#2		;ADD 2
	STA	APTADD		;AND SAVE
	BCC	*+3		;BRANCH IF
	INY			;NO CARRY
	STY	APTADD+1	;SAVE HIGH
	LDY	#1		;SET STARTING INDEX
GETHS0	CPY	TMPPTR		;COMPARE TO LIMIT
	BEQ	GETHS1		;CONTINUE IF EQUAL
	BCC	GETHS1		;BRANCH IF LESS
	LDA	TMPHSH		;ELSE GET HASH
	RTS			;AND QUIT
GETHS1	LDA	(APTADD),Y	;GET VALUE
	CLC			;NOW ADD
	ADC	TMPHSH		;IN OLD HASH
	AND	#HSHMSK		;AND MASK
	STA	TMPHSH		;AND SAVE
	INY			;BUMP LOOP INDEX
	JMP	GETHS0		;THEN LOOP
;
HSOSYM	LDA	SYMHSH		;GET SYMHSH
	ASL	A		;MULT BY TWO
	TAX			;MAKE INDEX
	LDA	HSHTBL,X	;GET VALUE
	LDY	HSHTBL+1,X	;IN TABLE
	RTS
;
SETLNK	LDX	BASE		;GET
	LDY	BASE+1		;BASE
	INX			;BUMP
	STX	APTADD		;BY
	BNE	*+3		;ONE
	INY			;AND
	STY	APTADD+1	;SAVE
	RTS
;SET POINTER FOR ADDR REFERENCE WITH OFFSET IN A
SETADP	LDY	#0		;CLEAR INDEX
	CLC			;AND CARRY
	ADC	(BASE),Y	;ADD PTR
	BCC	*+3		;BRANCH IF NO CARRY
	INY			;ELSE SET Y TO 1
	CLC			;CLEAR CARRY
	ADC	BASE		;ADD BASE
	STA	APTADD		;TO LOW
	TYA			;NOW ADD
	ADC	BASE+1		;WITH CARRY TO HIGH
	STA	APTADD+1	;AND SAVE
	RTS
;CHECK TO SEE IF ADDITIONAL SBTBL ENTRY WILL OVERFLOW LIMITS OF MEMORY. IF
;SO THEN ABORT ELSE RETURN. AT ENTRY A CONTAINS AMOUNT TO BE ADDED (COUNT)
LIMITS	CLC			;ADD COUNT
	ADC	SBTBL		;TO START
	LDY	SBTBL+1		;WITH
	BCC	*+3		;CARRY TO
	INY			;HIGH
	CMP	SBTTOP		;COMPARE TO LIMIT
	TYA			;INCLUDING
	SBC	SBTTOP+1	;HIGH
	BCS	*+3		;WHOOPS! NO BORROW
	RTS			;ELSE OK
	LDA	#TRUE		;SET TO
	STA	PASS2		;PASS 2
	LDA	#19		;SYMBOL TABLE ERROR
	JSR	ERROR		;SEND IT
	JMP	BOOT		;AND ABORT
;SET THE ADDRESS FIELD AT LOCATION LOC IN AY AND RESOLVED BIT
SETRSV	PHA			;SAVE
	TYA			;A
	PHA			;AND Y
	LDA	#4		;SET OFFSET
	JSR	SETADP		;OF FOUR
	LDY	#1		;SET INDEX TO 1
	PLA			;GET HIGH
	STA	(APTADD),Y	;AND SAVE
	DEY			;DROP Y TO 0
	PLA			;GET LOW
	STA	(APTADD),Y	;SAVE IT
	LDA	APTADD		;NOW
	BNE	*+4		;DROP
	DEC	APTADD+1	;POINTER
	DEC	APTADD		;BY ONE
	LDA	(APTADD),Y	;NOW SET
	ORA	#$80		;RESOLVED
	STA	(APTADD),Y	;BIT
	RTS
;RETURN TYPE OF VARIABLE
GETTYP	LDA	#3		;BUILD
	JSR	SETADP		;NEW INDIRECT
	LDY	#0		;CLEAR INDEX
	LDA	(APTADD),Y	;GET
	AND	#$7F		;MASK OUT SET BIT
	RTS
;SET TYPE OF VARIABLE TO A AND PRESERVE RESOLVED BIT
SETTYP	PHA			;SAVE TYPE
	LDA	#3		;CALCULATE
	JSR	SETADP		;NEW POINTER
	LDY	#0		;CLEAR INDEX
	PLA			;GET TYPE
	ORA	(APTADD),Y	;OR WITH CONTENTS
	STA	(APTADD),Y	;SAVE IT
	RTS
;GET RESOLVED BIT A:=TRUE IFF BIT=1 ELSE A:=FALSE
GETRES	LDA	#3		;BUILD
	JSR	SETADP		;POINTER
	LDY	#0		;CLEAR INDEX
	LDA	(APTADD),Y	;GET BYTE
	BMI	*+5		;BRANCH IF SET
	LDA	#FALSE		;ELSE SET
	RTS			;FALSE
	LDA	#TRUE		;WAS SET
	RTS
;GET THE ADDRESS OF THE PRINTNAME LOCATION IN AY
GETADR	LDA	#4		;BUILD
	JSR	SETADP		;POINTER
	LDY	#0		;CLEAR INDEX
	LDA	(APTADD),Y	;NOW GET LOW
	PHA			;SAVE
	INY			;SET Y TO 1
	LDA	(APTADD),Y	;GET HIGH
	TAY			;MOVE TO Y
	PLA			;GET LOW
	RTS
;CHECK TO SEE IF PRINTNAME LOCATED AT ADDRESS IN PRNTNM IS IN SBTBL. IF IS
;THEN A:=TRUE AND BASE:=ADDRESS ELSE A:=FALSE
SLOOKU	JSR	HSOSYM		;FIND BASE
SLOOKX	STA	BASE		;AND
	STY	BASE+1		;SAVE
SLOOK0	LDA	BASE		;SEE IF
	ORA	BASE+1		;BASE = 0
	BEQ	SLOOFL		;FALSE IF IS
	LDY	#0		;CLEAR INDEX
	LDA	(BASE),Y	;GET PTR
	STA	LEN		;SAVE AS LENGTH
	CMP	(PRNTNM),Y	;COMPARE
	BNE	SLOOK2		;BRANCH IF DIFFERENT
SLOOK1	LDY	LEN		;GET LENGTH
	LDA	(PRNTNM),Y	;GET NAME
	INY			;BUMP INDEX
	INY			;BY TWO
	CMP	(BASE),Y	;COMPARE TO ENTRY
	BNE	SLOOK2		;BRANCH IF DIFFERENT
	DEC	LEN		;DROP LENGTH
	BNE	SLOOK1		;LOOP FOR MORE
	LDA	#TRUE		;ELSE SAY TRUE
	RTS
SLOOK2	JSR	SETLNK		;SET LINK
	LDY	#0		;CLEAR INDEX
	LDA	(APTADD),Y	;GET LOW
	PHA			;SAVE IT
	INY			;SET Y TO 1
	LDA	(APTADD),Y	;GET HIGH
	TAY			;MOVE TO Y
	PLA			;GET LOW
	JMP	SLOOKX		;AND LOOP
SLOOFL	LDA	#FALSE		;WAS NOT
	RTS			;FOUND
;ENTER TOKEN REFERENCE BY PRNTNM AND SYMHSH INTO NEXT AVAILABLE LOCATION IN THE
;SYMBOL TABLE.  SET BASE TO BEGINNING OF THIS ENTRY AND INCREMENT SBTBL. CHECK
;FOR SYMBOL TABLE FULL
ENTER	LDY	#0		;CLEAR INDEX
	LDA	(PRNTNM),Y	;GET LENGTH
	CLC			;NOW
	ADC	#7		;ADD SEVEN
	PHA			;SAVE ON STACK
	JSR	LIMITS		;TEST LIMITS
	LDA	SBTBL		;UPDATE
	LDY	SBTBL+1		;BASE
	STA	BASE
	STY	BASE+1
	LDY	#0		;GET
	LDA	(PRNTNM),Y	;LENGTH
	STA	(BASE),Y	;MOVE TO TABLE
	TAX			;MAKE A COUNTER
	BEQ	ENTER1		;DONE IF ZERO
	INY			;START WITH Y=1
ENTER0	LDA	(PRNTNM),Y	;GET NAME
	INY			;BUMP INDEX
	INY			;BY TWO
	STA	(SBTBL),Y	;INSERT
	DEY			;DROP Y BY ONE
	DEX			;DROP COUNT
	BNE	ENTER0		;LOOP IF MORE
ENTER1	LDA	#3		;CLEAR RESOLVE BIT
	JSR	SETADP		;BY GETTING POINTER
	LDY	#0		;CLEAR INDEX
	TYA			;AND A
	STA	(APTADD),Y	;INSERT
	JSR	SETLNK		;SET LINK
	JSR	HSOSYM		;FIND ADDRESS
	PHA			;SAVE LOW ON STACK
	TYA			;HIGH TO A
	LDY	#1		;DO HIGH
	STA	(APTADD),Y	;FIRST
	DEY			;DROP Y
	PLA			;GET LOW
	STA	(APTADD),Y	;AND SET
	LDA	SYMHSH		;GET HASH
	ASL	A		;MULT BY TWO
	TAX			;MAKE INDEX
	LDA	BASE		;GET
	STA	HSHTBL,X	;AND MOVE
	LDA	BASE+1		;TO
	STA	HSHTBL+1,X	;TABLE
	PLA			;GET NEW LENGTH
	CLC			;NOW
	ADC	SBTBL		;TO START
	STA	SBTBL		;TO GET
	BCC	*+4		;NEW
	INC	SBTBL+1		;TABLE ADDRESS
	RTS
;INSERT SUBTYPE IN SBTBL
SETSUB	PHA			;SAVE CODE
	LDA	#6		;OFFSET POINTER
	JSR	SETADP		;GET POINTER
	LDY	#0		;CLEAR INDEX
	PLA			;GET CODE
	STA	(APTADD),Y	;SAVE
	RTS
;RETURN THE SUBTYPE
GETSUB	LDA	#6		;BUILD
	JSR	SETADP		;POINTER
	LDY	#0		;CLEAR POINTER
	LDA	(APTADD),Y	;GET SUBTYPE
	RTS
;
UNLINK	JSR	GETTYP		;GET TYPE
	STA	NUMPRM		;SAVE IT
	LDA	#1		;SET INDEX
	STA	LINKI		;TO ONE
UNLNK0	LDA	NUMPRM		;COMPARE LIMIT
	CMP	LINKI		;TO COUNT
	BCS	*+3		;CONTINUE IF OK
	RTS			;ELSE DONE
	JSR	NXTENT		;GET NEXT
	JSR	GETHSH		;AND HASH
	ASL	A		;MULT
	CLC			;BY TWO
	ADC	#(HSHTBL & $FF)	;AND ADD
	STA	TMPADR		;HASH TABLE START
	LDY	#((HSHTBL / $100)& $FF)	;GET HIGH
	BCC	*+3		;WITH CARRY
	INY			;BUMP
	STY	TMPADR+1	;AND SAVE
UNLNK1	LDY	#0		;CLEAR INDEX
	LDA	BASE		;COMPARE BASE LOW
	CMP	(TMPADR),Y	;TO BYTE
	BNE	UNLNK2		;BRANCH IF DIFFERENT
	INY			;SET Y TO 1
	LDA	BASE+1		;DO SAME
	CMP	(TMPADR),Y	;FOR HIGH
	BEQ	UNLNK3		;BRANCH IF ALL SAME
UNLNK2	LDY	#0		;Y BACK TO ZERO
	LDA	(TMPADR),Y	;GET LOW
	PHA			;SAVE IT
	INY			;BUMP INDEX
	LDA	(TMPADR),Y	;GET HIGH
	STA	TMPADR+1	;CHANGE ADDRESS
	PLA			;GET LOW
	STA	TMPADR		;SAVE IT
	INC	TMPADR
	BNE	UNLNK1
	INC	TMPADR+1
	JMP	UNLNK1		;AND LOOP
UNLNK3	JSR	SETLNK		;SET LINK
	LDY	#0		;CLEAR INDEX
	LDA	(APTADD),Y	;GET LOW
	STA	(TMPADR),Y	;AND MOVE
	INY			;NOW
	LDA	(APTADD),Y	;SAME
	STA	(TMPADR),Y	;FOR HIGH
	INC	LINKI		;BUMP LOOP INDEX
	JMP	UNLNK0		;AND LOOP
;
RELINK	JSR	GETTYP		;GET TYPE
	STA	NUMPRM		;SAVE IT
	LDA	#1		;SET COUNT
	STA	LINKI		;TO ONE
RELNK0	LDA	NUMPRM		;GET LIMIT AND
	CMP	LINKI		;COMPARE TO COUNT
	BCS	*+3		;BRANCH IF >=
	RTS			;ELSE DONE
	JSR	NXTENT		;DO NEXT ENTRY
	LDA	BASE		;NOW SET
	LDY	BASE+1		;TEMP
	STA	TMPADR
	INC	TMPADR		;BUMP LOW
	BNE	*+3
	INY
	STY	TMPADR+1	;SAVE HIGH
	JSR	GETHSH		;GET HASH
	ASL	A		;MULT BY TWO
	TAX			;MAKE INDEX
	LDY	#0		;CLEAR Y
	LDA	HSHTBL,X	;GET LOW
	STA	(TMPADR),Y	;SAVE IT
	INY			;NOW HIGH
	LDA	HSHTBL+1,X	;GET IT
	STA	(TMPADR),Y	;SAVE IT
	JSR	GETHSH		;GETHASH
	ASL	A
	TAX
	LDA	BASE		;NOW GET
	STA	HSHTBL,X	;AND PUT
	LDA	BASE+1		;NEW BASE
	STA	HSHTBL+1,X	;IN TABLE
	INC	LINKI		;BUMP LOOP INDEX
	JMP	RELNK0		;AND LOOP
;INITIALIZE SYNTHE
;DATA DEFINITIONS FOR INITIALIZATION
CONZER	.BYTE	1,"0"
CONONE	.BYTE	1,"1"
INSYN	LDA	#0		;FIRST
	STA	CODESI		;CLEAR
	STA	CODESI+1	;VARIABLES
	STA	DATACT
	STA	DATACT+1
	STA	ONSP
	STA	IFLABL
	STA	FDACT+1		;SET FDA
	LDA	#1		;COUNT TO
	STA	FDACT		;ONE
	LDA	#$FF		;SET PRT
	STA	PRTCT		;COUNT
	STA	PRTCT+1		;TO -1
	JSR	SETFLG		;SET FLAGS
	BIT	PASS1		;SEE IF PASS 1
	BMI	*+3		;BRANCH IF IS
	RTS			;ELSE DONE
	JSR	SUPINT		;SETUP INT FILE
	LDA	#(CONONE & $FF)	;INITIALIZE
	LDY	#((CONONE / $100)& $FF)	;PRINTNAME
	STA	PRNTNM		;POINTER
	STY	PRNTNM+1
	LDA	#'1'		;THEN
	STA	SYMHSH		;SYMBOL HASH
	JSR	ENTER		;PUT IN TABLE
	LDA	#'1'		;EMIT
	JSR	EMITCN		;EMIT
	LDA	#'$'		;DO A $
	JSR	EMITCN
	LDA	#0		;CONSTANT 1
	TAY			;IS AT FDA POSITION 0
	JSR	SETRSV		;SET
	LDA	#CONST		;SET TYPE
	JSR	SETTYP		;AS CONSTANT
	LDA	#(CONZER & $FF)	;NOW
	LDY	#((CONZER / $100)& $FF)	;POINT
	STA	PRNTNM		;TO
	STY	PRNTNM+1	;ZERO
	LDA	#'0'		;SET HASH
	STA	SYMHSH		;TO '0'
	JSR	ENTER		;ENTER IT
	LDA	#'0'		;NOW
	JSR	EMITCN		;OUTPUT IT
	LDA	#'$'		;DO $
	JSR	EMITCN
	LDA	#1		;SET ADDRESS
	LDY	#0
	JSR	SETRSV
	LDA	#CONST		;AND TYPE = CONST
	JMP	SETTYP		;THEN EXIT
;CALCULATE VAR(A)+.VARC
CALVRC	TAX			;MAKE INDEX
	LDA	VAR,X		;GET VAR CONTENTS
	CLC			;NOW ADD
	ADC	#(VARC & $FF)		;VARC START
	LDY	#((VARC	 / $100)& $FF)	;WITH CARRY
	BCC	*+3
	INY
	RTS
;SETLOOKUP
STLKUP	PHA			;SAVE PARAM
	JSR	CALVRC		;CALCULATE VARC
	STA	PRNTNM		;SAVE AS PRINTNAME
	STY	PRNTNM+1	;POSITION
	PLA			;GET PARAM
	TAX			;MAKE INDEX
	LDA	HASH,X		;GET ENTRY
	STA	SYMHSH		;AND SET SYMBOLS
	RTS
;LOOKUP$ONLY
LKONLY	JSR	STLKUP		;SET UP
	JMP	SLOOKU		;TRY TO LOOKUP
;NORMAL$LOOKUP
NRMLKU	JSR	LKONLY		;CALL LOOKUP$ONLY
	BEQ	*+3		;IF FALSE
	RTS			;ELSE DONE
	JSR	ENTER		;ENTER IN TABLE
	LDA	#FALSE		;THEN DONE
	RTS
;COUNT SIZE OF THE PRT AND RETURN WITH COUNT IN AY
CNTPRT	INC	PRTCT		;BUMP
	BNE	*+4
	INC	PRTCT+1
	LDA	PRTCT		;AND GET
	LDY	PRTCT+1
	RTS
;SETIFNAME
SETIFN	LDA	#(IFLBLN & $FF)	;POINT TO PRINTNAME
	LDY	#((IFLBLN / $100)& $FF)
	STA	PRNTNM
	STY	PRNTNM+1
	LDA	IFLABL		;SET SYMHASH
	AND	#HSHMSK
	STA	SYMHSH
	RTS
;ENTER$COMPILER$LABEL(A)
ENCMLB	BIT	PASS1		;TEST FOR PASS 1
	BMI	*+3		;BRANCH IF IS
	RTS
	PHA			;SAVE PARAMETER
	JSR	SETIFN		;CALL SETIFNAME
	JSR	ENTER		;CALL ENTER
	PLA			;GET PARAM
	CLC			;ADD TO CODESIZE
	ADC	CODESI
	LDY	CODESI+1
	BCC	*+3
	INY			;WITH CARRY
	JMP	SETRSV		;CALL SETADDR(CODESIZE+A)
;SET$COMPILER$LABEL
STCMLB	INC	IFLABL		;BUMP IFLABLE
	JSR	SETIFN		;CALL SETIFNAME
	JMP	SLOOKU		;CALL "S"LOOKUP
;COMPILER$LABEL
COMLBL	JSR	STCMLB		;CALL SET$COMPILER$LABEL
	JSR	GETADR		
	JMP	GENTWO		;CALL GEN$TWO(GETADDR)
;CHECK FOR MP AND SP BOTH FLOATING POINT
CHKTY1	LDA	STYPMP		;GET STYPEMP
	CMP	#FLOTPT		;SEE IF = FLOATPT
	BNE	DOC1MF		;ERROR IF NOT
	LDA	STYPSP		;GET STYPESP
	CMP	#FLOTPT		;SEE IF = FLOATPT
	BNE	DOC1MF		;ERROR IF NOT
	LDA	#TRUE
	RTS
DOC1MF	JSR	MFERR		;ERROR
	LDA	#FALSE
	RTS
;CHECK MP AND SP BOTH SAME TYPE
CHKTY2	LDA	STYPSP		;GET STYPESP
	CMP	STYPMP		;SEE IF STYPEMP SAME
	BNE	*+5		;ERROR IF NOT
	LDA	#TRUE
	RTS
	LDA	#13		;MIXED MODE ERROR
	JSR	ERROR
	LDA	#FALSE
	RTS
;CHKTYP3
CHKTY3	LDA	STYPSP		;GET STYPESP
	JSR	STSTMP		;CALL SETSTYPEMP(STYPESP)
	LDA	STYPSP		;GET STYPESP
	CMP	#FLOTPT		;SEE IF FLOATING
	BNE	*+5		;ERROR IF NOT
	LDA	#TRUE
	RTS
	JSR	MFERR		;MUST BE FLOATING ERROR
	LDA	#FALSE
	RTS
;MUST BE FLOATING POINT ERROR
MFERR	LDA	#12
	JMP	ERROR
;CHKTYP4
CHKTY4	LDA	STYPM1		;GET STYPEMP1
	CMP	#STRING		;SEE IF STRING
	BNE	*+5		;OK IF NOT
	JSR	MFERR		;ELSE MUST BE FLOATING ERROR
	LDA	#RON
	JMP	GENERT		;CALL GENERATE(RON)
;CHKTYP5
CHKTY5	JSR	CHKTY4		;CALL CHKTYP4
	INC	TYPEMP		;BUMP TYPEMP
	LDA	TYPEMP
	JMP	STTYMP		;CALL SETTYPEMP(TYPEMP:=TYPEMP+1)
;SUBCALC
SUBCAL	LDA	TYPESP		;GET TYPE
	JSR	SETSUB		;CALL SETSUBTYPE(TYPESP)
	LDA	#ROW
	JSR	GENERT		;CALL GENERATE(ROW)
	LDA	TYPESP
	JSR	GENERT		;CALL GENERATE(TYPESP)
	LDA	#STD
	JMP	GENERT		;CALL GENERATE(STD)
;GEN$STORE
GENSTR	LDA	STYPM1		;GET STYPEMP1
	CMP	#FLOTPT		;SEE IF FLOATING
	BNE	*+7		;BRANCH IF NOT
	LDA	#STD
	JMP	GENERT		;CALL GENERATE(STD)
	LDA	#STS
	JMP	GENERT		;CALL GENERATE(STS)
;SETUP$INPUT
SEINPU	LDA	#TRUE
	STA	INPSTM		;INPUTSTMT=TRUE
	LDA	#RCN
	JMP	GENERT		;CALL GENERATE(RCN)
;GEN$READ(A,Y)
GENRDE	LDX	STYPSP		;GET STYPESP
	CPX	#STRING		;SEE IF STRING
	BNE	*+10		;BRANCH IF NOT
	JSR	GENERT		;CALL GENERATE(I)
	LDA	#STS
	JMP	GENERT		;CALL GENERATE(STS)
	TYA
	JSR	GENERT		;CALL GENERATE(Y)
	LDA	#STD
	JMP	GENERT		;CALL GENERATE(STD)
;GET$FIELD
GETFLD	LDA	TYPESP		;GET TYPESP
	CMP	#SIMVAR		;SEE IF SIMPLE VARIABLE
	BNE	*+9		;SKIP IF NOT
	LDA	SYMLSP
	LDY	SYMLSP+1
	JSR	LITERL		;CALL LITERAL(SYMLOCSP)
	BIT	INPSTM		;TEST INPUTSTMT
	BPL	*+9		;BRANCH IF NOT
	LDA	#RES
	LDY	#RDV
	JMP	GENRDE		;CALL GEN$READ(RES,RDV)
	BIT	FILEIO		;SEE IF FILE IO
	BPL	*+9		;BRANCH IF NOT
	LDA	#RDS
	LDY	#RDN
	JMP	GENRDE		;CALL GEN$READ(RDS,RDN)
	LDA	#DRS
	LDY	#DRF
	JMP	GENRDE		;CALL GEN$READ(DRS,DRF)
;GEN$ON
GENON	LDA	#RON
	JSR	GENERT		;CALL GENERATE(RON)
	INC	ONSP
	LDX	ONSP		;GET AS INDEX
	LDA	ONSTAK,X	;GET ENTRY
	LDY	#0		;HIGH ALWAYS CLEAR
	JSR	LITERL		;CALL(ONSTACK(ONSP:=ONSP+1))
	LDA	#CKO
	JSR	GENERT		;CALL GENERATE(CKO)
	LDA	#BFN
	JMP	GENERT		;CALL GENERATE(BFN)
;GEN$ON$2
GENON2	LDA	TYPESP
	LDX	ONSP
	STA	ONSTAK,X
	RTS
;GENNEXT
GENNXT	DEC	FORCNT		;DROP FORCOUNT
	LDA	FORCNT		;GET IT
	CMP	#255		;SEE IF WRAP
	BNE	*+9		;BRANCH IF OK
	INC	FORCNT		;SET TO 0
	LDA	#16		;NEXT W/O FOR ERROR
	JMP	ERROR
	LDA	#BRS
	JSR	GENERT		;CALL GENERATE(BRS)
	LDY	#2*2		;WORD ADDRESSING
	LDA	(NXSTPT),Y	;GET LOW
	PHA			;SAVE
	INY
	LDA	(NXSTPT),Y	;GET HIGH
	TAY			;MOVE TO Y
	PLA			;GET LOW
	JSR	GENTWO		;CALL GEN$TWO(NEXTADDRESS(2))
	LDY	#0*2		;STILL WORD ADDRESSING
	LDA	CODESI
	STA	(NXSTPT),Y	;PUT
	INY
	LDA	CODESI+1	;DO HIGH
	ORA	#$80		;SET MSB
	STA	(NXSTPT),Y	;INSERT
GENNX0	LDY	#1		;SET INDEX TO 1
	LDA	(NXSTPT),Y	;GET NEXTBYTEV(1)
	BMI	*+3		;CONTINUE IF > 127
	RTS
	CLC			;NOW ADD 8 TO NEXTSTMTPTR
	LDA	NXSTPT
	ADC	#8
	STA	NXSTPT
	BCC	GENNX0
	INC	NXSTPT+1
	JMP	GENNX0
;GEN$NEXT$WITH$IDENT
GENWID	LDA	MPP1		;GET MPP1
	JSR	LKONLY
	BEQ	GENWIE		;BRANCH IF FALSE
	LDY	#3*2		;WORD ADDRESSING
	LDA	(NXSTPT),Y	;GET LOW
	CMP	BASE		;COMPARE TO LOW BASE
	BNE	GENWIE		;ERROR IF DIFFERENT
	INY
	LDA	(NXSTPT),Y	;SAME FOR HIGH
	CMP	BASE+1
	BNE	GENWIE
	JMP	GENNXT		;ELSE OK
GENWIE	LDA	#14		;NEXT DOES NOT MATCH FOR
	JMP	ERROR
;CHECK$UL$ERROR
CHKULE	BIT	ULERFL		;TEST FLAG
	BPL	*+7		;BRANCH IF CLEAR
	LDA	#20		;ELSE UNDEFINED LABEL
	JSR	ERROR
	LDA	#FALSE		;NOW CLEAR FLAG
	STA	ULERFL
	RTS
;FINDLABEL
FNDLBL	LDA	SP		;GET SP
	JSR	NRMLKU		;NORMAL$LOOKUP(SP)
	BNE	*+3		;IF TRUE
	RTS
	BIT	PASS2		;IF PASS2
	BMI	*+3		;THEN
	RTS
	JSR	GETRES		;IF NOT GETRES
	BEQ	*+3		;THEN
	RTS
	LDA	#TRUE
	STA	ULERFL		;ULERRORFLAG=TRUE
	RTS
;RESOLVE$LABEL
RESLBL	JSR	FNDLBL		;FINDLABEL
	LDA	#PRO		;PRESET FOR TRUE
	BIT	GSBSTM		;TEST GOSUBSTMT
	BMI	*+4		;IF TRUE
	LDA	#BRS		;ELSE
	JSR	GENERT		;GENERATE( )
	JSR	GETADR
	JMP	GENTWO		;GEN$TWO(GETADDR)
;PROCESS$SIMPLE$VARIABLE
PSIMPV	JSR	NRMLKU		;NORMAL$LOOKUP
	BEQ	PSIMP0		;IF FALSE THEN
	JSR	GETTYP		;IF GETYPE
	CMP	#SIMVAR		;= SIMVAR
	BEQ	PSIMP1		;THEN
	LDA	#11		;ARRAY NAME USED AS SIMPLE VARIABLE
	JSR	ERROR
	JMP	PSIMP1		;CONTINUE
PSIMP0	JSR	CNTPRT
	JSR	SETRSV		;SETADDR(COUNTPRT)
	LDA	#SIMVAR
	JSR	SETTYP		;SETYPE(SIMVAR)
PSIMP1	JSR	GETADR
	STA	SYMLSP
	STY	SYMLSP+1	;SYMLOCSP=GETADDR
	JSR	STSLSP		;SETSYMLOCSP( )
	LDA	#SIMVAR
	JSR	STTYSP		;SETTYPESP(SIMVAR)
	BIT	FORSTM		;IF FORSTMT
	BMI	*+3		;THEN
	RTS
	LDA	#FALSE
	STA	FORSTM		;FORSTMT=FALSE
	LDY	#3*2		;WORD ADDRESSING
	LDA	BASE
	STA	(SBTTOP),Y
	INY
	LDA	BASE+1
	STA	(SBTTOP),Y	;FORADDRESS(3)=BASE
	RTS
;GEN$ILS
GENILS	STA	WHERE
	STY	WHERE+1		;SAVE PARAMETER
	LDA	#STRING
	JSR	STSTSP		;SETSTYPESP(STRING)
	LDA	#ILS
	JSR	GENERT		;GENERATE(ILS)
GENIL0	LDA	#1
	STA	STRPTR		;STRPTR=1
GENIL1	LDY	#0
	LDA	(WHERE),Y	;IF STRINGTOSPOOL(0)
	CMP	STRPTR		;< STRPTR
	BCC	GENIL2		;THEN
	LDY	STRPTR
	LDA	(WHERE),Y	;STRINGTOSPOOL(STRPTR)
	JSR	GENERT		;GENERATE
	INC	STRPTR		;STRPTR=STRPTR+1
	JMP	GENIL1
GENIL2	BIT	CONT		;IF NOT CONT
	BPL	*+8		;THEN
	JSR	SCANNR		;SCANNER
	JMP	GENIL0
	LDA	#0
	JMP	GENERT		;GENERATE(0)
;GENCON
GENCON	LDA	#CON
	JSR	GENERT		;GENERATE(CON)
	LDA	#CONST
	JSR	STTYSP		;SETTYPESP(CONST)
	LDA	#FLOTPT
	JSR	STSTSP		;SETSTYPESP(FLOATPT)
	LDA	SP
	JSR	LKONLY		;LOOKUP$ONLY(SP)
	BEQ	GENCO0		;IF FALSE THEN
	JSR	GETTYP		;IF GETYPE
	CMP	#CONST		;<> CONST
	BNE	GENCO0		;THEN
	JSR	GETADR
	JMP	GENTWO		;GEN$TWO(GETADDR)
GENCO0	LDA	#1
	STA	IGEN		;IGEN=1
GENCO1	LDA	ACCLEN
	CMP	IGEN		;IF IGEN>ACCLEN
	BCC	GENCO2		;THEN
	LDX	IGEN
	LDA	ACCUM,X
	JSR	EMITCN		;EMITCON(ACCUM(I))
	INC	IGEN		;I=I+1
	JMP	GENCO1
GENCO2	LDA	#'$'
	JSR	EMITCN		;EMITCON('$')
	INC	FDACT
	BNE	*+4
	INC	FDACT+1		;FDACT=FDACT+1
	LDA	FDACT
	LDY	FDACT+1
	JMP	GENTWO		;GEN$TWO(FDACT)
;PUT$FIELD
PUTFLD	BIT	FILEIO		;IF NOT FILEIO
	BPL	NTFLIO		;THEN
	LDA	STYPSP		;IF STYPESP
	CMP	#FLOTPT		;<> FLOATPT
	BNE	*+7		;THEN
	LDA	#WRN
	JMP	GENERT		;GENERATE(WRN)
	LDA	#WRS
	JMP	GENERT		;GENERATE(WRS)
NTFLIO	LDA	STYPSP		;IF STYPESP
	CMP	#FLOTPT		;= FLOATPT
	BEQ	*+7		;THEN
	LDA	#WST
	JMP	GENERT		;GENERATE(WST)
	LDA	TYPESP		;IF TYPESP
	CMP	#74		;NOT A TAB
	BNE	*+3		;THEN
	RTS
	LDA	#WRV
	JMP	GENERT		;GENERATE(WRV)
;GEN$PARM
GENPRM	LDA	TYPEMP
	CMP	#UNFUNC		;IF TYPEMP = UNFUNC
	BEQ	*+3		;THEN
	RTS
	LDA	SYMLMP
	LDY	SYMLMP+1
	STA	BASE
	STY	BASE+1		;BASE=SYMLOCMP
	JSR	NXTENT		;NEXTENTRY
	LDA	BASE
	LDY	BASE+1
	JSR	STSLMP		;SETSYMLOCMP(BASE)
	DEC	HASHMP
	LDA	HASHMP
	JSR	STHAMP		;SETHASHMP(HASHMP:=HASHMP-1)
	JSR	GETADR
	JMP	LITERL		;LITERAL(GETADDR)
;CHECKPARM
CHKPRM	LDA	TYPEMP
	CMP	#UNFUNC		;IF TYPEMP <> UNFUNC
	BNE	NTUNFN		;THEN
	LDA	SYMLMP
	LDY	SYMLMP+1
	STA	BASE
	STY	BASE+1		;BASE=SYMLOCMP
	JSR	GETSUB		;GETSUBTYPE
	CMP	STYPM1		;IF = STYPEMP1
	BEQ	*+7		;THEN
	LDA	#5		;ELSE INVALID PARAMETER TYPE IN FUNCTION REF
	JSR	ERROR
	JMP	GENSTR		;GEN$STORE
NTUNFN	LDA	#1
	LDY	STYPM1		;IF STYPEMP1
	CPY	#FLOTPT		;<> FLOATPT
	BNE	*+4		;THEN
	LDA	#FALSE
	EOR	HASHMP		;XOR HASHMP
	AND	#1		;TEST LSB ONLY
	BEQ	*+7		;IF TRUE
	LDA	#5		;INVALID TYPE IN FUNCTION PARAMETER LIST
	JSR	ERROR
	LDA	HASHMP
	LSR	A		;SHR(HASHMP,1)
	JSR	STHAMP		;SETHASHMP
	DEC	STYPMP
	LDA	STYPMP
	JMP	STSTMP		;SETSTYPEMP(STYPEMP=STYPEMP-1)
;FUNCGEN
FNCGEN	LDA	TYPEMP
	CMP	#UNFUNC		;IF TYPEMP <> UNFUNC
	BNE	NOFNGN		;THEN
	LDA	HASHMP		;IF HASHMP=0
	BEQ	*+7		;THEN
	LDA	#4		;INCORRECT NUMBER PARAMETERS
	JSR	ERROR
	LDA	#PRO
	JSR	GENERT		;GENERATE(PRO)
	LDA	SRLOSP
	LDY	SRLOSP+1
	STA	BASE
	STY	BASE+1		;BASE=SRLOCSP
	JSR	GETADR
	JMP	GENTWO		;GEN$TWO(GETADDR)
NOFNGN	LDA	STYPMP
	AND	#3		;IF STYPEMP AND 3 = 0
	BEQ	*+7		;THEN
	LDA	#4		;INCORRECT NUMBER PARAMETERS
	JSR	ERROR
	LDA	TYPEMP
	JSR	GENERT		;GENERATE(TYPEMP)
	LDA	STYPMP
	AND	#%01000000	;IF NOT ROL(STYPEMP,2)
	BEQ	*+7		;THEN
	LDA	#STRING
	JMP	STSTMP		;SETSTYPEMP(STRING)
	LDA	#FLOTPT
	JMP	STSTMP		;SETSTYPEMP(FLOATPT)
;ENTER$PARM
ENTRPR	BIT	PASS1		;IF PASS 1
	BMI	*+3		;THEN
	RTS
	LDA	MPP1
	JSR	STLKUP		;SETLOOKUP(MPP1)
	JSR	ENTER
	JSR	CNTPRT
	JSR	SETRSV		;SETADDR(COUNTPRT)
	LDA	STYPM1
	JSR	SETSUB		;SETSUBTYPE(STYPEMP1)
	LDA	#SIMVAR
	JSR	SETTYP		;SETYPE(SIMVAR)
	LDX	TYPEMP
	INX
	TXA
	JMP	STTYMP		;SETTYPEMP(TYPEMP+1)
;SYNTHESIS
;MAIN CODE GENERATION ROUTINE
SYNTHE	STA	PRODCT		;SAVE PRODUCTION
	LDA	PASS2		;IF NOT PASS 2
	AND	LSTPRD		;AND LISTPROD
	BEQ	NPPROD		;THEN
	LDA	#(PRDMSG & $FF)
	LDY	#((PRDMSG / $100)& $FF)
	JSR	PRNMSG		;PRINT MESSAGE
	LDA	PRODCT
	LDY	#0
	JSR	PRNDEC		;PRINT NUMBER
	JSR	CRLF
NPPROD	JSR	SCOPY		;SET UP SIMPLE VARIABLES
	LDA	PRODCT		;GET NUMBER
	ASL	A		;MAKE WORD INDEX
	TAX			;MAKE INDEX
	BCS	GT127		;BRANCH IF > 127
	LDA	PRODL,X
	STA	JPROD+1
	LDA	PRODL+1,X
	STA	JPROD+2		;SET ADDRESS
JPROD	JMP	$FFFF		;DO IT
GT127	LDA	PRODH,X
	STA	JPROD+1
	LDA	PRODH+1,X
	STA	JPROD+2
	JMP	JPROD		;SAME FOR HIGH
;PRODUCTION JUMP TABLE FOR 0 - 127
PRODL	.WORD	PRN,PRN,PR2,PR3,CHKULE,CHKULE,PRN,PRN
	.WORD	PRN,PRN,PRN,PRN,PRN,PRN,PRN,PRN
	.WORD	PRN,PRN,PRN,PRN,PRN,PRN,PRN,PRN
	.WORD	PRN,PRN,PRN,PRN,PRN,PRN,PR30,PR31
	.WORD	PRN,PR33,PR34,PR35,PRN,PR37,PRN,PR39
	.WORD	PRN,PR41,PRN,PR43,PR44,CHKTY3,PR46,PRN
	.WORD	PR48,PR49,PRN,PR51,PR52,PRN,PRN,PR55
	.WORD	PR56,PR57,PR58,CHKTY5,PR60,FNCGEN,GENPRM,PR63
	.WORD	PR64,PR65,GENCON,PR67,PR68,PR69,PR69,PR71
	.WORD	PR71,PR73,PR74,PR75,PR75,PR77,PR78,PR79
	.WORD	PR80,PR81,PR82,PR82,PR84,PRN,RESLBL,PR87
	.WORD	PR88,PR89,PR90,ENTRPR,PR92,PR92,ENTRPR,PRN
	.WORD	PRN,PRN,PR98,CHKTY4,PR100,PRN,SUBCAL,SUBCAL
	.WORD	PR104,PR105,CHKTY5,PRN,PR108,PR108,PR110,PRN
	.WORD	PR112,PR113,SEINPU,GETFLD,GETFLD,PR117,PRN,PR119
	.WORD	PUTFLD,PUTFLD,PRN,PUTFLD,PUTFLD,PRN,PR126,PR127
;PRODUCTION JUMP TABLE FOR 128 - 255
PRODH	.WORD	PR128,PRN,PR130,RESLBL,GENON2,PR133,GENON,PR135
	.WORD	PR136,PR137,PR138,PRN,PRN,PRN,PRN,GENWID
	.WORD	GENNXT,PRN,GENWID,PR147,PR148,PR149,PR150,PR151
	.WORD	PR152
;PRODUCTIONS NOT ALREADY DEFINED BY SINGLE NO-PARAMETER SUBROUTINES
PRN	RTS			;DO NOTHING - USED A LOT !!!!
;2	<LINE NUMBER>::=<NUMBER>
PR2	LDA	SP
	JSR	LKONLY		;LOOKUP$ONLY(SP)
	BEQ	PR2D		;IF FALSE
	JSR	GETRES		;SEE IF RESOLVED
	BEQ	PR2C		;IF NOT
	JSR	GETADR		;GETADDR
	CMP	CODESI		;TRY LOW
	BNE	PR2A		;ERROR IF <>
	CPY	CODESI+1
	BEQ	*+7		;OK IF SAME
PR2A	LDA	#0		;DUPLICATE LABELS
	JSR	ERROR
	JMP	LINENU
PR2C	LDA	CODESI
	LDY	CODESI+1
	JSR	SETRSV		;SETADDR(CODESIZE)
	LDA	#LABLE
	JSR	SETTYP		;SETYPE(LABLE)
	JMP	LINENU
PR2D	LDA	#'*'
	STA	SEPRTR		;SEPARATOR=ASTRIK
	JMP	LINENU
;3	|
PR3	LDA	#':'		;SET SEPARATOR
	STA	SEPRTR
	JMP	LINENU		;THEN DO LINE NUMBER
;30	<ASSIGNMEMT>::=<ASSIGN HEAD><EXPRESSION>
PR30	JSR	CHKTY2		;IF NOT CHKTYP2
	BEQ	*+5		;THEN
	JMP	GENSTR		;ELSE GEN$STORE
	RTS
;31	<ASSIGN HEAD>::=<VARIABLE>=
PR31	LDA	TYPEMP
	CMP	#SIMVAR		;IF TYPEMP=SIMVAR
	BEQ	*+3		;THEN
	RTS
	LDA	SYMLMP
	LDY	SYMLMP+1
	JMP	LITERL		;LITERAL(SYMLOCMP)
;33	|<EXPRESSION><OR><LOGICAL FACTOR>
PR33	JSR	CHKTY1		;IF CHKTYP1
	BNE	*+3		;THEN
	RTS
	LDA	TYPEM1
	JMP	GENERT		;GENERATE(TYPEMP1)
;34	<OR>::=OR
PR34	LDA	#BOR
	JMP	STTYSP		;SETTYPESP(BOR)
;35	|XOR
PR35	LDA	#EXR
	JMP	STTYSP		;STTYSP
;37	<LOGICAL SECONDARY>
PR37	JSR	CHKTY1		;IF CHKTYP1
	BNE	*+3		;THEN
	RTS
	LDA	#ANDO
	JMP	GENERT		;GENERATE(ANDO)
;39	|NOT <LOGICAL PRIMARY>
PR39	JSR	CHKTY3		;IF CHKTYP3
	BNE	*+3		;THEN
	RTS
	LDA	#NOT
	JMP	GENERT		;GENERATE(NOT)
;41	<ARITHMETIC EXPRESSION>
PR41	JSR	CHKTY2		;IF CHKTYP2
	BNE	*+3		;THEN
	RTS
	LDA	STYPSP
	CMP	#FLOTPT		;IF STYPESP<>FLOATPT
	BNE	PR41A		;THEN
	LDA	TYPEM1
	JMP	GENERT		;GENERATE(TYPEMP1)
PR41A	CLC
	LDA	TYPEM1
	ADC	#16
	JSR	GENERT		;GENERATE(TYPEMP1+16)
	LDA	#FLOTPT
	JMP	STSTMP		;SETSTYPEMP(FLOATPT)
;43	|<ARITHMETIC EXPRESSION>+<TERM>
PR43	JSR	CHKTY2		;IF CHKTYP2
	BNE	*+3		;THEN
	RTS
	LDA	#FAD
	LDY	STYPSP
	CPY	#FLOTPT		;IF STYPESP=FLOATPT
	BEQ	*+4		;THEN GENERATE(FAD)
	LDA	#CAT
	JMP	GENERT		;ELSE GENERATE(CAT)
;44	|<ARITHMETIC EXPRESSION>-<TERM>
PR44	JSR	CHKTY1		;IF CHKTYP1
	BNE	*+3		;THEN
	RTS
	LDA	#FMI
	JMP	GENERT		;GENERATE(FMI)
;46	|-<TERM>
PR46	JSR	CHKTY3		;IF CHKTYP3
	BNE	*+3		;THEN
	RTS
	LDA	#NEG
	JMP	GENERT		;GENERATE(NEG)
;48	|<TERM>*<PRIMARY>
PR48	JSR	CHKTY1		;IF CHKTYP1
	BNE	*+3		;THEN
	RTS
	LDA	#FMU
	JMP	GENERT		;GENERATE(FMU)
;49	|<TERM>/<PRIMARY>
PR49	JSR	CHKTY1		;IF CHKTYP1
	BNE	*+3		;THEN
	RTS
	LDA	#FDI
	JMP	GENERT		;GENERATE(FDI)
;51	|<PRIMARY>**<ELEMENT>
PR51	JSR	CHKTY1		;THE CHKTYP1
	BNE	*+3		;THEN
	RTS
	LDA	#EXP
	JMP	GENERT		;GENERATE(EXP)
;52	<ELEMENT>::=<VARIABLE>
PR52	LDA	TYPESP		;IF TYPESP
	CMP	#SIMVAR		;= SIMVAR
	BEQ	*+7		;THEN
	LDA	#LOD
	JMP	GENERT		;ELSE GENERATE(LOD)
	LDA	SYMLSP
	LDY	SYMLSP+1
	JMP	LITLOD		;LITLOAD(SYMLOCSP)
;55	|(<EXPRESSION>)
PR55	LDA	STYPM1
	JMP	STSTMP		;SETSTYPEMP(STYPEMP1)
;56	<VARIABLE>::=<IDENTIFIER>
PR56	LDA	SP
	JMP	PSIMPV		;PROCESS$SIMPLE$VARIABLE(SP)
;57	|<SUBSCRIPT HEAD><EXPRESSION>
PR57	BIT	FORSTM		;IF NOT FORSTMT
	BPL	*+7		;THEN
	LDA	#3		;FOR INDEX NOT SIMPLE VARIABLE
	JSR	ERROR
	JSR	CHKTY5		;CHKTYP5
	LDA	SYMLMP
	LDY	SYMLMP+1
	STA	BASE
	STY	BASE+1		;BASE=SYMLOCSP
	JSR	GETSUB		;IF GETSUBTYPE
	CMP	TYPEMP		;= TYPEMP
	BEQ	*+7		;THEN
	LDA	#17		;INCORRECT NUMBER SUBSCRIPTS
	JSR	ERROR
	JSR	GETADR
	JSR	LITLOD		;LITLOAD(GETADDR)
	LDA	#SUB
	JSR	GENERT		;GENERATE(SUBO)
	LDA	#SUBVAR
	JMP	STTYMP		;SETTYPEMP(SUBVAR)
;58	<SUBSCRIPT HEAD>::=<IDENTIFIER>(
PR58	LDA	MP
	JSR	LKONLY		;LOOKUP$ONLY(MP)
	BEQ	PR58A		;IF NOT THEN ERROR
	JSR	GETTYP		;IF GETYPE
	CMP	#SUBVAR		;= SUBVAR
	BEQ	*+7		;THEN OK
PR58A	LDA	#10		;SUBSCRIPTED VARIABLE NOT DIMENSIONED
	JSR	ERROR
	LDA	#0
	JSR	STTYMP		;SETTYPEMP(0)
	LDA	BASE
	LDY	BASE+1
	JMP	STSLMP		;SETSYMLOCMP(BASE)
;60	<FUNCTION CALL>::=<FUNCTION HEADING><EXPRESSION>
PR60	JSR	CHKPRM		;CHECKPARM
	LDA	SRLOMP
	LDY	SRLOMP+1
	STA	SRLOSP
	STY	SRLOSP+1	;SRLOCSP=SRLOCMP
	JMP	FNCGEN		;FUNCGEN
;63	|<FUNCTION HEADING><EXPRESSION>
PR63	JSR	CHKPRM		;CHECK$PARM
	JMP	GENPRM		;GEN$PARM
;64	<FUNCTION NAME>::=<USER DEFINED NAME>
PR64	LDA	SP
	JSR	LKONLY		;IF LOOKUP$ONLY(SP)
	BNE	*+7		;THEN
	LDA	#6		;FUNCTION UNDEFINED
	JMP	ERROR
	LDA	BASE
	LDY	BASE+1
	JSR	STSRSP		;SETSRLOCSP(BASE)
	LDA	BASE
	LDY	BASE+1
	JSR	STSLSP		;SETSYMLOCSP(BASE)
	LDA	#UNFUNC
	JSR	STTYSP		;SETTYPESP(UNFUNC)
	JSR	GETTYP
	JMP	STHASP		;SETHASHSP(GETYPE)
;65	|<PREDEFINED NAME>
PR65	LDA	FUNCOP
	JSR	STTYSP		;SETTYPESP(FUNCOP)
	LDA	STYPSP
	LSR	A
	LSR	A		;SHR(STYPESP,2)
	AND	#7
	JMP	STHASP		;SETHASHSP( )
;67	|<STRING>
PR67	LDA	#(ACCUM & $FF)
	LDY	#((ACCUM / $100)& $FF)
	JMP	GENILS		;GEN$ILS(.ACCUM)
;68	<RELATION>::= =
PR68	LDA	#7
	JMP	STTYSP		;SETTYPESP(7)
;69	| >= | GE
PR69	LDA	#9
	JMP	STTYMP		;SETTYPEMP(9)
;71	| <= | LE
PR71	LDA	#10
	JMP	STTYMP		;SETTYPEMP(10)
;73	| >
PR73	LDA	#6
	JMP	STTYSP		;SETTYPESP(6)
;74	| <
PR74	LDA	#5
	JMP	STTYSP		;SETTYPESP(5)
;75	| <> | NE
PR75	LDA	#8
	JMP	STTYMP		;SETTYPEMP(8)
;77	<FOR STATEMENT>::=<FOR HEAD> TO <EXPRESSION> <STEP CLAUSE>
PR77	LDY	#3*2		;WORD ADDRESSING
	LDA	(SBTTOP),Y
	STA	BASE
	INY
	LDA	(SBTTOP),Y
	STA	BASE+1		;BASE=FORADDRESS(3)
	LDA	TYPESP		;IF NOT TYPESP
	LSR	A
	BCC	*+7		;THEN
	LDA	#DUP
	JSR	GENERT		;GENERATE(DUP)
	JSR	GETADR
	JSR	LITLOD		;LITLOAD(GETADDR)
	LDA	#FAD
	JSR	GENERT		;GENERATE(FAD)
	LDA	TYPESP		;IF NOT
	LSR	A		;TYPESP
	BCC	PR77A		;THEN
	JSR	GETADR
	JSR	LITERL		;LITERAL(GETADDR)
	LDA	#XCH
	JSR	GENERT		;GENERATE(XCH)
PR77A	LDA	#STO
	JSR	GENERT		;GENERATE(STO)
	LDA	TYPESP		;IF NOT
	LSR	A		;TYPESP
	BCC	PR77B		;THEN
	LDA	#XCH
	JSR	GENERT		;GENERATE(XCH)
	LDA	#0
	TAY
	JSR	LITERL		;LITERAL(0)
	LDA	#LSS
	JSR	GENERT		;GENERATE(LSS)
	LDA	#5
	LDY	#0
	JSR	LITERL		;LITERAL(5)
	LDA	#BFC
	JSR	GENERT		;GENERATE(BFC)
	LDA	#LEQ
	JSR	GENERT		;GENERATE(LEQ)
	LDA	#2
	LDY	#0
	JSR	LITERL		;LITERAL(2)
	LDA	#BFN
	JSR	GENERT		;GENERATE(BFN)
PR77B	LDA	#GEQ
	JSR	GENERT		;GENERATE(BEQ)
	LDA	#BRC
	JSR	GENERT		;GENERATE(BRC)
	LDY	#0*2		;WORD ADDRESS
	LDA	(SBTTOP),Y
	PHA
	INY
	LDA	(SBTTOP),Y
	TAY
	PLA
	JSR	GENTWO		;GEN$TWO(FORADDRESS(0))
	LDY	#1*2		;WORD ADDRESSING
	LDA	CODESI
	STA	(SBTTOP),Y
	INY
	LDA	CODESI+1
	STA	(SBTTOP),Y	;FORADDRESS(1)=CODESIZE
	RTS
;78	<FOR HEAD>::=<FOR><ASSIGNMENT>
PR78	LDA	#BRS
	JSR	GENERT		;GENERATE(BRS)
	LDY	#1*2		;WORD ADDRESSING
	LDA	(SBTTOP),Y
	PHA
	INY
	LDA	(SBTTOP),Y
	TAY
	PLA
	JSR	GENTWO		;GEN$TWO(FORADDRESS(1))
	LDY	#2*2		;WORD ADDRESSING
	LDA	CODESI
	STA	(SBTTOP),Y
	INY
	LDA	CODESI+1
	STA	(SBTTOP),Y	;FORADDRESS(2)=CODESIZE
	RTS
;79	<FOR>::= FOR
PR79	LDA	#TRUE
	STA	FORSTM		;FORSTMT=TRUE
	SEC
	LDA	SBTTOP
	SBC	#8
	STA	SBTTOP
	STA	NXSTPT
	LDY	SBTTOP+1
	BCS	*+3
	DEY
	STY	SBTTOP+1
	STY	NXSTPT+1	;SBTBLTOP,NEXTSTMTPTR=SBTBLTOP-8
	LDY	#1
	LDA	(NXSTPT),Y
	AND	#$7F
	STA	(NXSTPT),Y	;NEXTBYTEV(1)=NEXTBYTEV(1) AND $7F
	LDA	#0
	JSR	LIMITS		;LIMITS(0)
	INC	FORCNT		;FORCOUNT=FORCOUNT+1
	RTS
;80	<STEP CLAUSE>::= STEP <EXPRESSION>
PR80	LDA	#1
	JMP	STTYMP		;SETTYPEMP(TRUE)
;81	|
PR81	LDY	#3*2		;WORD ADDRESSING
	LDA	(SBTTOP),Y
	STA	BASE
	INY
	LDA	(SBTTOP),Y
	STA	BASE+1		;BASE=FORADDRESS(3)
	JSR	GETADR
	JSR	LITERL		;LITERAL(GETADDR)
	LDA	#FALSE
	JSR	STTYSP		;SETTYPESP(FALSE)
	LDA	#CON
	JSR	GENERT		;GENERATE(CON)
	LDA	#0
	TAY
	JMP	GENTWO		;GEN$TWO(0)
;82	<IF STATEMENT>::=<IF GROUP>
PR82	LDA	#0
	JMP	ENCMLB		;ENTER$COMPILER$LABEL(0)
;84	| IF END # <EXPRESSION> THEN <NUMBER>
PR84	LDA	#RON
	JSR	GENERT		;GENERATE(RON)
	LDA	#DEF
	JSR	GENERT		;GENERATE(DEF)
	JSR	FNDLBL		;FINDLABEL
	JSR	GETADR
	JMP	GENTWO		;GEN$TWO(GETADDR)
;87	<IF ELSE GROUP>::=<IF HEAD><STATEMENT LIST> ELSE
PR87	LDA	#3
	JSR	ENCMLB		;EMTER$COMPILER$LABEL(3)
	LDA	#BRS
	JSR	GENERT		;GENERATE(BRS)
	JMP	COMLBL		;COMPILER$LABEL
;88	<IF HEAD>::=IF <EXPRESSION> THEN
PR88	LDA	STYPM1		;IF STYPEMP1
	CMP	#STRING		;<> STRING
	BNE	*+7		;THEN
	LDA	#8		;ELSE IF EXPRESSION IS NOT FLOATING POINT
	JSR	ERROR
	LDA	#BRC
	JSR	GENERT		;GENERATE(BRC)
	JMP	COMLBL		;COMPILER$LABEL
;89	<DUMMY ARGUMENT LIST>::=<EXPRESSSION>
PR89	JSR	CHKTY2		;IF CHKTY2
	BNE	*+3		;THE
	RTS
	LDA	SYMLMP
	LDY	SYMLMP+1
	STA	BASE
	STY	BASE+1
	LDA	TYPEM1
	JSR	SETTYP		;SETYPE(TYPEMP1)
	JSR	UNLINK
	LDA	#XCH
	JSR	GENERT		;GENERATE(XCH)
	LDA	#RTN
	JSR	GENERT		;GENERATE(RTN)
	LDA	#0
	JMP	ENCMLB		;ENTER$COMPILER$LABEL(0)
;90	(UD FUNCTION NAME>::= DEF <USER DEFINED NAME>
PR90	LDA	#BRS
	JSR	GENERT		;GENERATE(BRS)
	JSR	COMLBL		;COMPILER$LABEL
	LDA	SP
	JSR	NRMLKU		;NORMAL$LOOKUP(SP)
	PHA			;SAVE RESULT
	LDA	STYPSP
	JSR	STSTMP		;SETSTYPEMP(STYPESP)
	LDA	BASE
	LDY	BASE+1
	JSR	STSLMP		;SETSYMLOCMP(BASE)
	BIT	PASS1		;IF PASS 1
	BMI	*+6		;THEN
	PLA			;CLEAR STACK
	JMP	RELINK
	PLA			;IF NOT FLAG
	BEQ	*+7		;THEN
	LDA	#2		;ELSE FUNCTION NAME PREVIOUSLY DEFINED
	JSR	ERROR
	LDA	CODESI
	LDY	CODESI+1
	JMP	SETRSV		;SETADDR(CODESIZE)
;92	|
PR92	LDA	#0
	JMP	STTYMP		;SETTYPEMP(0)
;98	<FILE DECLERATION>::=<IDENTIFIER><FILE REC SIZE>
PR98	LDA	MP
	JSR	PSIMPV		;PROCESS$SIMPLE$VARIABLE(MP)
	LDA	STYPMP		;IF STYPEMP
	CMP	#FLOTPT		;<> FLOATPT
	BNE	*+7		;THEN
	LDA	#23		;INVALID TYPE IN FILE
	JSR	ERROR
	LDA	SYMLSP
	LDY	SYMLSP+1
	JSR	LITLOD		;LITLOAD(SYMLOCSP)
	LDA	#OPN
	JMP	GENERT		;GENERATE(OPN)
;100	|
PR100	LDA	#0
	TAY
	JMP	LITERL		;LITERAL(0)
;104	<DIMENSION VARIABLE>::=<DIM VAR HEAD><EXPRESSION>
PR104	JSR	CHKTY5		;CHKTYP5
	LDA	SYMLMP
	LDY	SYMLMP+1
	STA	BASE
	STY	BASE+1		;BASE=SYMLOCSP
	RTS
;105	<DIM VAR HEAD>::=<IDENTIFIER>(
PR105	LDA	MP
	JSR	NRMLKU		;IF NOT NORMAL$LOOKUP(MP)
	BEQ	PR105A		;THEN
	BIT	PASS1		;IF NOT PASS 1
	BPL	PR105A		;THEN
	LDA	#1		;IDENTIFIER IN DIM PREVIOUSLY DEFINED
	JSR	ERROR
PR105A	LDA	#SUBVAR
	JSR	SETTYP		;SETYPE(SUBVAR)
	BIT	PASS1		;IF NOT PASS 1
	BPL	*+8		;THEN
	JSR	CNTPRT
	JSR	SETRSV		;SETADDR(COUNTPRT)
	JSR	GETADR
	JSR	LITERL		;LITERAL(GETADDR)
	LDA	#0
	JSR	STTYMP		;SETTYPEMP(0)
	LDA	BASE
	LDY	BASE+1
	JMP	STSLMP		;SETSYMLOCMP(BASE)
;108	<CLOSE LIST>::=<EXPRESSION>
PR108	LDA	STYPSP		;IF STYPESP
	CMP	#STRING		;<> STRING
	BNE	*+5		;THEN
	JSR	MFERR		;MUST BE FLOATING
	LDA	#RON
	JSR	GENERT		;GENERATE(RON)
	LDA	#CLS
	JMP	GENERT		;GENERATE(CLS)
;110	<READ STATEMENT>::= READ <FILE OPTION><READ LIST>
PR110	BIT	FILEIO		;IF NOT FILEIO
	BPL	PR110A		;THEN
	LDA	#EDR
	JSR	GENERT		;GENERATE(EDR)
;117	|
PR117	LDA	#FALSE
	STA	FILEIO		;FILEIO=FALSE
PR110A	RTS
;112	<INPUT STATEMENT>::=INPUT <PROMPT OPTION><READ LIST>
PR112	LDA	#ECR
	JSR	GENERT		;GENERATE(ECR)
	LDA	#FALSE
	STA	INPSTM		;INPUTSTMT=FALSE
	RTS
;113	<PROMPT OPTION>::=<CONSTANT>
PR113	JSR	PUTFLD		;PUT$FIELD
	JMP	SEINPU		;SETUP$INPUT
;119	|PRINT <FILE OPTION><FILE LIST>
PR119	LDA	#EDW
	JSR	GENERT		;GENERATE(EDW)
	LDA	#FALSE
	STA	FILEIO		;FILEIO=FALSE
	RTS
;126	|
PR126	LDA	#DBF
	JMP	GENERT		;GENERATE(DBF)
;127	<FILE OPTION>::= # <EXPRESSION>
PR127	LDA	#TRUE
	STA	FILEIO		;FILEIO=TRUE
	LDA	#RON
	JSR	GENERT		;GENERATE(RON)
	LDA	#RDB
	JMP	GENERT		;GENERATE(RDB)
;128	| # <EXPRESSION>,<EXPRESSION>;
PR128	LDA	#TRUE
	STA	FILEIO		;FILEIO=TRUE
	LDA	#RON
	JSR	GENERT		;GENERATE(RON)
	LDA	#XCH
	JSR	GENERT		;GENERATE(XCH)
	LDA	#RON
	JSR	GENERT		;GENERATE(RON)
	LDA	#RDF
	JMP	GENERT		;GENERATE(RDF)
;130	| ,
PR130	BIT	FILEIO		;IF NOT FILEIO
	BPL	*+3		;THEN
	RTS
	LDA	#NSP
	JMP	GENERT		;GENERATE(NSP)
;133	|<ON GOSUB> <LABEL LIST>
PR133	JSR	GENON2		;GEN$ON$2
	LDA	#0
	JMP	ENCMLB		;ENTER$COMPILER$LABEL(0)
;135	<ON GOSUB>::= ON <EXPRESSION> <GOSUB>
PR135	JSR	STCMLB		;SET$COMPILER$LABEL
	JSR	GETADR
	JSR	LITERL		;LITERAL(GETADDR)
	LDA	#ADJ
	JSR	GENERT		;GENERATE(ADJ)
	LDA	#XCH
	JSR	GENERT		;GENERATE(XCH)
	JMP	GENON		;GEN$ON
;136	<LABEL LIST>::=<NUMBER>
PR136	JSR	RESLBL		;RESOLVE$LABEL
	LDA	#1
	JMP	STTYSP		;SETTYPESP(1)
;137	|<LABEL LIST>,<NUMBER>
PR137	JSR	RESLBL		;RESOLVE$LABEL
	LDX	TYPEMP
	INX
	TXA
	JMP	STTYMP		;SETTYPEMP(TYPEMP+1)
;138	<GOSUB STATEMENT>::=<GOSUB><NUMBER>
PR138	LDA	#TRUE
	STA	GSBSTM		;GOSUBSTMT=TRUE
	JSR	RESLBL		;RESOLVE$LABEL
	LDA	#FALSE
	STA	GSBSTM		;GOSUBSTMT=FALSE
	RTS
;147	<OUT STATEMENT>::= OUT <EXPRESSION>,<EXPRESSION>
PR147	LDA	#FLOTPT		;IF STYPEMP1
	CMP	STYPM1		;<> FLOATPT
	BNE	*+6		;THEN
	CMP	STYPSP		;IF STYPESP = FLOATPT
	BEQ	*+5		;THEN OK
	JMP	MFERR		;MUST BE FLOATING ERROR
	LDA	#RON
	JSR	GENERT		;GENERATE(RON)
	LDA	#XCH
	JSR	GENERT		;GENERATE(XCH)
	LDA	#RON
	JSR	GENERT		;GENERATE(RON)
	LDA	#POT
	JMP	GENERT		;GENERATE(POT)
;148	<RETURN STATEMENT>::= RETURN
PR148	LDA	#RTN
	JMP	GENERT		;GENERATE(RTN)
;149	<STOP STATEMENT>::= STOP
PR149	LDA	#XIT
	JMP	GENERT		;GENERATE(XIT)
;150	<END STATEMENT>::= END
PR150	BIT	PASS1		;IF NOT PASS 1
	BPL	PR150B		;THEN
	LDA	#FALSE
	STA	PASS1		;PASS1=FALSE
	LDA	FORCNT		;IF FORCOUNT
	BEQ	PR150A		;= ZERO THEN OK
	LDA	#24		;ELSE FOR WITHOUT NEXT ERROR
	JSR	ERROR
	LDA	#0
	STA	FORCNT		;FORCOUNT=0
PR150A	LDA	#'*'
	JSR	GENERT		;GENERATE('*')
	CLC
	LDA	CODESI
	LDY	CODESI+1
	ADC	#3
	BCC	*+3
	INY
	AND	#$FC
	JSR	GENTWO		;GEN$TWO((CODESIZE+3) AND $FFFC)
	LDA	DATACT
	LDY	DATACT+1
	JSR	GENTWO		;GEN$TWO(DATACT)
	JSR	CNTPRT
	JMP	GENTWO		;GEN$TWO(COUNTPRT)
PR150B	LDA	NXTCHR
	CMP	#CR
	BEQ	*+8
	JSR	GETCHR
	JMP	PR150B		;WHILE NOT EOL
	LDA	#XIT
	JSR	GENERT		;GENERATE(XIT)
	LDA	#$7F
	JSR	GENERT		;GENERATE($7F)
	JSR	WRTINT		;WRITE$INT$FILE
	JSR	CLSINT		;CLOSE$INT$FILE
	LDA	ERRCNT
	LDY	ERRCNT+1
	JSR	PRNDEC		;PRINTDEC(ERRORCOUNT)
	LDA	#(ERDMSG & $FF)
	LDY	#((ERDMSG / $100)& $FF)
	JSR	PRNMSG		;PRINT('ERRORS DETECTED')
	JSR	CRLF
	JMP	BOOT
;151	<RESTORE STATEMENT>::= RESTORE
PR151	LDA	#RST
	JMP	GENERT		;GENERATE(RST)
;152	<RANDOMIZE STATEMENT>::= RANDOMIZE
PR152	LDA	#IRN
	JMP	GENERT		;GENERATE(IRN)
;GETIN1  (DOES AY=INDEX1(STATE))
GETIN1	LDA	STATE
	LDY	STATE+1		;GET STATE
	ASL	A
	TAX
	TYA
	ROL	A
	TAY
	CLC
	TXA
	ADC	#(INDEX1 & $FF)	;ADD STATE*2 SINCE IS WORD ADDRESSING
	STA	GT+1
	TYA
	ADC	#((INDEX1 / $100)& $FF)
	STA	GT+2
	LDX	#0
	JSR	GT		;GET LOW
	PHA
	INX
	JSR	GT		;GET HIGH
	TAY
	PLA
	RTS
;GENERAL PURPOSE LDA ABS,X ROUTINE
GT	LDA	$FFFF,X
	RTS
;GETIN2 (DOES AY=INDEX2(STATE))
GETIN2	LDA	STATE
	LDY	STATE+1
	CLC
	ADC	#(INDEX2 & $FF)
	STA	G2+1
	TYA
	ADC	#((INDEX2 / $100)& $FF)
	STA	G2+2
G2	LDA	$FFFF
	LDY	#0		;Y ALWAYS ZERO
	RTS
;INCSP
INCSP	INC	SP
	LDA	SP		;BUMP AND GET
	CMP	#PSTKSZ		;COMPARE TO MAX
	BEQ	*+3		;IF = THEN
	RTS			;ELSE OK
	LDA	#18		;STACK OVERFLOW ERROR
	JMP	ERROR
;LOOKAHEAD
LAHEAD	BIT	NOLOOK		;IF NOT NOLOOK
	BPL	LAHEAX		;THEN DONE
	JSR	SCANNR		;SCANNER
	LDA	#FALSE
	STA	NOLOOK		;NOLOOK=FALSE
LAHEAX	RTS
;SET$VARC$I ---- SET VARC AND INCREMENT VARINDEX
STVRCI	LDX	VARIND
	STA	VARC,X		;SAVE
	INX
	STX	VARIND		;BUMP INDEX
	CPX	#VARCSZ+1	;IF TOO BIG
	BCS	*+3		;THEN ERROR
	RTS
	LDA	#21		;VARC OVERFLOW
	JMP	ERROR
;INITIALIZE ALL OF SYSTEM
INTLZ	JSR	INSYMT		;IN$SYMTBL
	JSR	INSYN		;IN$SYN
	JMP	INSCAN
;MAIN PROGRAM
MAIN	LDX	#2		;CLEAR PAGE ZERO
	LDA	#0
PZC	STA	0,X
	INX
	CPX	#LZ
	BNE	PZC
	LDA	#TRUE		;INITIALIZE ONCE
	STA	PASS1
	STA	LWRUPR
	LDA	#':'
	STA	SEPRTR
	LDA	#SRCRSZ
	STA	SRCIND
	LDA	#(OPNMSG & $FF)
	LDY	#((OPNMSG / $100)& $FF)
	JSR	PRNMSG		;PRINT OPENING MESSAGE
	JSR	CRLF
	JSR	INTLZ		;INITIALIZE ALL
;DO FOREVER
;DO WHILE (PASS1 OR PASS2)
M10	BIT	PASS1		;IF PASS 1
	BMI	M12		;THEN GO
	BIT	PASS2		;OR IF
	BMI	M12		;PASS2 GO
	JMP	EWP1P2		;ELSE END OF DO WHILE PASS1 OR PASS2
M12	LDA	#TRUE
	STA	NOLOOK		;NOLOOK=TRUE
	STA	CMPLNG		;COMPILING=TRUE
	LDA	#(STARTS & $FF)
	LDY	#((STARTS / $100)& $FF)
	STA	STATE
	STY	STATE+1		;STATE=STARTSTATE
	LDA	#255
	STA	SP		;SP=255
	LDA	#0
	STA	VARIND		;VARIND=0
	STA	VAR
;DO WHILE COMPILING
M14	BIT	CMPLNG		;TEST FOR COMPILING
	BPL	M10		;BRANCH IF NOT
	LDA	#(MAXRNO & $FF)
	CMP	STATE
	LDA	#((MAXRNO / $100)& $FF)
	SBC	STATE+1		;IF STATE>MAXRNO
	BCS	*+5		;CONTINUE IF OK
	JMP	M30		;ELSE TRY NEXT
	JSR	INCSP
	LDA	SP
	ASL	A		;WORD ADDRESSING
	TAX
	LDA	STATE
	STA	STSTAK,X
	LDA	STATE+1
	STA	STSTAK+1,X	;STATESTACK(SP)=STATE
	JSR	GETIN1
	STA	I
	STY	I+1		;I=GETIN1
	JSR	LAHEAD		;LOOKAHEAD
	JSR	GETIN2		;INDEX2(STATE)
	CLC
	ADC	I
	STA	J
	TYA
	ADC	I+1
	STA	J+1
	LDA	J
	BNE	*+4
	DEC	J+1
	DEC	J		;J=I-1+GETIN2
M20	LDA	J
	CMP	I
	LDA	J+1
	SBC	I+1		;IF I>J
	BCC	M14		;GO TO WHILE COMPILING
	CLC
	LDA	I
	ADC	#(READ1 & $FF)
	STA	I2
	LDA	I+1
	ADC	#((READ1 / $100)& $FF)
	STA	I2+1
	LDY	#0
	LDA	(I2),Y		;A=READ(I)
	CMP	TOKEN		;IF NOT TOKEN
	BNE	M23		;THEN
	LDA	VARIND		;GET VARINDEX
	LDX	SP
	STA	VAR,X		;SET VAR(SP)
	LDX	#0
	STX	INDEX		;INDEX=0
M22	LDA	ACCUM,X		;ACCUM(INDEX)
	JSR	STVRCI
	INC	INDEX		;INDEX=INDEX+1
	LDX	INDEX
	CPX	ACCLEN		;IF < LENGTH
	BCC	M22		;THEN LOOP
	BEQ	M22		;LOOP ALSO IF EQUAL
	LDX	SP
	LDA	HSHCDE
	STA	HASH,X		;HASH(SP)=HASHCODE
	LDA	SUBTYP
	STA	STYPE,X		;STYPE(SP)=SUBTYPE
	LDA	I
	ASL	A
	STA	I2
	LDA	I+1
	ROL	A
	STA	I2+1		;I2=I*2
	CLC
	LDA	I2
	ADC	#(READ2 & $FF)
	STA	I2
	LDA	I2+1
	ADC	#((READ2 / $100)& $FF)
	STA	I2+1		;READ2(I)
	LDY	#0
	LDA	(I2),Y		;LOW
	STA	STATE
	INY
	LDA	(I2),Y
	STA	STATE+1		;STATE=READ2(I)
	LDA	#TRUE
	STA	NOLOOK		;NOLOOK=TRUE
	LDA	J
	LDY	J+1
	STA	I
	STY	I+1
	JMP	M24
M23	LDA	I
	CMP	J		;OK IF DIFFERENT
	BNE	M24
	LDA	I+1
	CMP	J+1
	BNE	M24		;OK IF DIFFERENT
	LDA	#15		;NO LEGAL PRODUCTION
	JSR	ERROR
M24	INC	I		;BUMP I AND LOOP
	BNE	*+4
	INC	I+1
	JMP	M20
M30	LDA	#(MAXPNO & $FF)	;IF STATE <= MAXPNO
	CMP	STATE
	LDA	#((MAXPNO / $100)& $FF)
	SBC	STATE+1
	BCC	*+5
	JMP	M40
	JSR	GETIN2		;INDEX2(STATE)
	STA	I		;IGNORE HIGH
	SEC
	LDA	SP
	SBC	I
	STA	MP		;MP=SP-GETIN2
	TAY
	INY
	STY	MPP1		;MPP1=MP+1
	SEC
	LDA	STATE
	SBC	#(MAXPNO & $FF)	;PARAMETER=STATE-MAXPNO
	JSR	SYNTHE		;SYNTHESIZE(STATE-MAXPNO)
	BIT	CMPLNG		;IF COMPILING
	BMI	*+5		;THEN GO
	JMP	M10		;ELSE GO TO DO WHILE PASS 1 OR PASS 2
	LDA	MP
	STA	SP		;SP=MP
	JSR	GETIN1
	STA	I
	STY	I+1		;I=GETIN1
	LDX	SP
	LDA	VAR,X
	STA	VARIND		;VARINDEX=VAR(SP)
	TXA
	ASL	A
	TAX			;WORD ADDRESSING
	LDA	STSTAK,X
	STA	J
	LDA	STSTAK+1,X
	STA	J+1		;J=STATESTACK(SP)
M31	LDX	#0
	STX	K+1		;HIGH MUST BE ZERO
	LDX	I
	LDA	APPLY1,X
	STA	K
	BEQ	M33		;EXIT IF K=0
	CMP	J
	BNE	M32		;OK IF LOW K <> LOW J
	LDA	J+1
	BEQ	M33		;IF =0 THEN J=K
M32	INC	I
	BNE	M31		;LOOP
	INC	I+1
	JMP	M31
M33	LDA	I		;IGNORE HIGH I
	ASL	A
	STA	I2
	LDA	I+1
	ROL	A
	STA	I2+1
	CLC
	LDA	I2
	ADC	#(APPLY2 & $FF)
	STA	I2
	LDA	I2+1
	ADC	#((APPLY2 / $100)& $FF)
	STA	I2+1
	LDY	#0
	LDA	(I2),Y
	STA	STATE
	INY
	LDA	(I2),Y
	STA	STATE+1		;STATE=APPLY2(I)
	ORA	STATE
	BNE	*+7		;IF NOT ZERO THEN
	LDA	#FALSE
	STA	CMPLNG		;COMPILING=FALSE
	JMP	M14
M40	LDA	#(MAXLNO & $FF)	;IF STATE
	CMP	STATE
	LDA	#((MAXLNO / $100)& $FF)
	SBC	STATE+1		;> MAXLNO
	BCC	M50		;THEN GO TO NEXT
	JSR	GETIN1
	STA	I
	STY	I+1		;I=GETIN1
	JSR	LAHEAD		;LOOKAHEAD
M41	LDX	#0
	STX	K+1
	CLC
	LDA	I
	ADC	#(LOOK1 & $FF)
	STA	I2
	LDA	I+1
	ADC	#((LOOK1 / $100)& $FF)
	STA	I2+1
	LDY	#0
	LDA	(I2),Y		;A=LOOK1(I)
	STA	K
	BEQ	M42		;EXIT IF K=0
	CMP	TOKEN
	BEQ	M42		;OR IF =TOKEN
	INC	I		;BUMP AND LOOP
	BNE	M41
	INC	I+1
	JMP	M41
M42	LDA	I		;WORD ADDRESSING
	ASL	A
	STA	I2
	LDA	I+1
	ROL	A
	STA	I2+1
	CLC
	LDA	I2		;ADD START
	ADC	#(LOOK2 & $FF)
	STA	I2
	LDA	I2+1
	ADC	#((LOOK2 / $100)& $FF)
	STA	I2+1
	LDY	#0
	LDA	(I2),Y		;LOW
	STA	STATE
	INY
	LDA	(I2),Y
	STA	STATE+1
	JMP	M14
M50	JSR	INCSP
	JSR	GETIN2
	PHA			;SAVE LOW
	LDA	SP
	ASL	A		;WORD ADDRESSING
	TAX
	PLA
	STA	STSTAK,X	;STATESTACK(SP)=GETIN2
	TYA
	STA	STSTAK+1,X
	JSR	GETIN1
	STA	STATE
	STY	STATE+1		;STATE=GETIN1
	JMP	M14
;END OF DO WHILE PASS 1 OR PASS 2
EWP1P2	LDA	#TRUE
	STA	LSTSRC		;LISTSOURCE=TRUE
	JSR	INTLZ		;INITIALIZE
	LDA	#TRUE
	STA	PASS2		;PASS2=TRUE
	JMP	M10		;DO FOREVER
;PARSER STATE TABLES
READ1	.BYTE	0,49,10,13,2,49,50,52,53,54,49,13,22,32,2,3,7,27,30,49,50,52,53
	.BYTE	54,2,3,7,30,49,50,52,53,54,54,52,12,52,2,3,7,49,50,52,53,54,12
	.BYTE	52,49,49,50,2,3,7,12,30,49,50,52,53,54,2,2,2,9,5,9,49,4,8,49,16
	.BYTE	20,28,29,31,35,36,37,38,40,42,43,44,45,46,48,49,51,52,49,14,6
	.BYTE	22,13,52,9,52,9,23,9,21,33,41,16,21,33,36,43,9,21,33,5,9,21,33
	.BYTE	5,21,33,5,9,21,33,5,9,21,33,6,9,21,33,21,33,39,21,33,41,5,21,33
	.BYTE	6,21,33,9,6,9,16,17,20,25,26,27,28,29,31,35,36,37,38,40,42,43
	.BYTE	44,45,46,48,51,52,2,16,20,28,29,31,35,36,37,38,40,42,43,44,45
	.BYTE	46,48,51,52,52,13,24,11,34,9,2,1,3,7,10,13,15,18,19,3,7,9,0
LOOK1	.BYTE	0,49,0,10,13,0,13,0,11,23,34,0,52,0,12,52,0,49,50,0,6,9,11,23
	.BYTE	34,0,2,0,2,0,9,0,4,8,0,4,8,0,4,8,0,4,8,0,4,8,0,11,23,34,0,14,0
	.BYTE	14,0,14,0,9,0,9,0,9,0,9,0,9,0,21,33,0,21,33,0,21,33,0,21,33,0
	.BYTE	21,33,39,0,21,33,0,21,33,0,21,33,0,23,0,21,33,0,21,33,0,9,0,9
	.BYTE	0,6,9,0,52,0,11,23,0,11,23,34,0,2,0,11,23,0,52,0,24,0,24,0,11
	.BYTE	0,23,0,11,0,9,0,2,0,1,3,7,10,13,15,18,19,0,3,7,0,9,0
APPLY1	.BYTE	0,0,0,0,55,105,0,19,0,0,32,47,0,0,3,4,12,14,16,17,20,21,22,26
	.BYTE	27,34,36,38,40,98,100,102,103,114,116,0,0,46,0,28,0,33,0,63,0,5
	.BYTE	6,8,9,0,7,10,0,23,0,13,19,32,35,47,55,99,101,105,106,0,0,0,0,0
	.BYTE	39,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,99
	.BYTE	106,0,0,0,0,0,40,0,0,0,0,0,0,62,0,0,74,0,74,0,0,0,0,0,0,0,0,0
READ2	.WORD	0,191,264,260,3,255,256,129,254,253,326,258,329,331,3,5,8,31
	.WORD	33,255,256,129,254,253,3,5,8,33,255,256,129,254,253,279,42,21
	.WORD	129,3,5,8,255,256,129,254,253,20,129,273,255,256,3,5,8,20,33
	.WORD	255,256,129,254,253,247,294,4,335,280,283,320,7,10,327,24,26
	.WORD	268,32,34,285,328,125,126,338,38,330,127,128,337,340,275,341
	.WORD	129,325,23,302,27,220,130,17,131,13,190,14,223,224,277,24,223
	.WORD	224,328,330,12,223,224,246,248,223,224,244,223,224,249,252,223
	.WORD	224,293,295,223,224,316,16,223,224,223,224,36,223,224,37,288
	.WORD	223,224,317,223,224,15,318,319,24,25,26,29,30,339,268,32,34,285
	.WORD	328,125,126,338,38,330,127,128,337,340,341,129,251,24,26,268,32
	.WORD	34,285,328,125,126,338,38,330,127,128,337,340,341,129,45,22,28
	.WORD	124,276,286,282,122,6,9,123,257,259,261,265,6,9,11,0
LOOK2	.WORD	0,1,176,2,2,263,18,262,177,177,177,19,334,333,35,35,178,39,39
	.WORD	179,180,180,180,180,180,40,41,245,43,181,44,332,49,49,231,50,50
	.WORD	234,51,51,235,52,52,232,53,53,233,182,182,182,55,57,236,58,237
	.WORD	59,238,66,308,68,300,69,299,70,301,72,296,76,76,297,77,77,309
	.WORD	78,78,219,84,84,312,85,85,85,183,87,87,336,88,88,298,89,89,310
	.WORD	278,91,93,93,313,94,94,269,95,321,96,322,97,97,184,99,185,186
	.WORD	186,101,314,314,314,102,104,250,187,187,105,106,188,109,221,110
	.WORD	222,111,193,274,112,113,272,115,284,117,189,118,118,118,118,118
	.WORD	118,118,118,229,119,119,230,120,290
APPLY2	.WORD	0,0,161,71,169,170,168,199,198,200,218,267,201,98,80,90,151,152
	.WORD	92,155,83,86,154,74,150,75,156,146,147,148,149,153,82,79,81,73
	.WORD	46,167,166,226,225,228,227,174,173,133,135,134,136,132,139,140
	.WORD	138,240,239,305,64,64,304,64,64,304,64,64,304,241,114,243,116
	.WORD	163,60,242,63,202,61,47,266,194,271,164,137,197,172,108,107,204
	.WORD	65,171,287,196,175,292,291,103,205,145,206,210,165,143,144,142
	.WORD	207,159,141,307,100,160,162,208,213,56,62,158,157,209,323,48
	.WORD	324,54,203,67,216,212,211,195,214,215
INDEX1	.WORD	0,1,2,24,24,4,4,4,4,4,4,34,24,36,24,10,24,24,11,168,24,24,24,4
	.WORD	12,14,24,24,24,33,34,35,36,37,24,45,24,47,24,48,50,60,61,62,63
	.WORD	64,24,36,66,67,67,67,67,67,69,70,89,90,90,90,91,92,89,37,93,94
	.WORD	95,96,97,97,97,98,99,100,103,108,100,100,100,111,115,118,122
	.WORD	126,100,130,133,100,100,100,136,100,139,100,100,142,142,143,24
	.WORD	36,24,145,24,24,167,168,36,186,187,188,188,189,189,189,24,191
	.WORD	24,192,193,201,203,1,3,6,8,12,14,17,20,26,28,30,32,35,38,41,44
	.WORD	47,51,53,55,57,59,61,63,65,67,70,73,76,79,83,86,89,92,94,97,100
	.WORD	102,104,107,109,112,116,118,121,123,125,127,129,131,133,135,137
	.WORD	146,149,192,217,306,303,311,289,217,270,315,306,217,217,306,281
	.WORD	1,2,2,3,3,3,3,3,4,4,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,9,10,13
	.WORD	14,14,36,36,37,37,39,39,41,41,43,43,43,43,43,45,45,45,50,50,53
	.WORD	53,53,53,55,55,66,66,67,67,68,68,69,69,70,70,72,72,72,72,72,72
	.WORD	72,72,72,73,74,75,76,76,77,77,77,78,78,79,80,81,82,83,83,84,84
	.WORD	85,86,86,87,88,88,89,90,90,91,93,93,94,95,95,96,96,97,98,98,99
	.WORD	99,99,102,102,103,103,103,104,104,105,105,106,106,108,108,109
	.WORD	110,110,111,112,113,113,115,116,116,118,118,120,120,121,121,122
	.WORD	123,124,125,126,127
INDEX2	.BYTE	0,1,2,9,9,6,6,6,6,6,6,1,9,1,9,1
	.BYTE	9,9,1,18,9,9,9,6,2,10,9,9,9,1,1
	.BYTE	1,1,8,9,2,9,1,9,2,10,1,1,1,1,2
	.BYTE	9,1,1,2,2,2,2,2,1,19,1,1,1,1,1,1
	.BYTE	1,8,1,1,1,1,1,1,1,1,1,3,5,3,2,2
	.BYTE	2,4,3,4,4,4,2,3,3,2,2,2,3,2,3,2
	.BYTE	2,1,1,2,9,1,9,22,9,9,1,18,1,1,1
	.BYTE	1,1,1,2,1,9,1,9,1,8,2,1,2,3,2,4
	.BYTE	2,3,3,6,2,2,2,3,3,3,3,3,4,2,2,2
	.BYTE	2,2,2,2,2,3,3,3,3,4,3,3,3,2,3,3
	.BYTE	2,2,3,2,3,4,2,3,2,2,2,2,2,2,2,2
	.BYTE	9,3,2,1,19,35,39,40,43,55,85,97
	.BYTE	99,101,105,106,117,2,0,0,0,0,0,0
	.BYTE	0,0,2,0,0,0,0,0,0,0,0,0,0,0,0
	.BYTE	0,0,0,0,0,0,1,1,1,0,2,0,0,0,2,0
	.BYTE	1,0,2,0,2,2,1,1,0,2,2,0,2,0,0,0
	.BYTE	2,0,2,1,2,2,0,1,2,0,0,0,0,0,1,0
	.BYTE	1,0,0,0,1,0,3,1,0,1,0,0,1,5,1,1
	.BYTE	2,2,3,1,2,0,0,2,1,0,2,1,2,0,1,0
	.BYTE	2,2,1,2,1,0,2,2,1,2,1,0,0,2,0,2
	.BYTE	2,0,2,0,0,2,0,0,2,4,0,0,1,1,1,2
	.BYTE	2,0,2,1,0,1,0,1,1,0,0,2,3,0,0,0
	.BYTE	0,0
;RESERVED WORD TABLES
;LENGTH=1
LNG1	.BYTE	CR,"<(+*)-,=/",SEMICO,">:#^"
;LENGTH=2
LNG2	.BYTE	"IFTOGOONOREQLTGTLEGENE"
;LENGTH=3
LNG3	.BYTE	"FORLETREMDIMDEFNOTAND"
	.BYTE	"TANSINCOSSQRTABLOGLEN"
	.BYTE	"FREATNABSEXPINTEND"
	.BYTE	"POSRNDSGNASCVALXORSUB"
;LENGTH=4
LNG4	.BYTE	"PEEKPOKE"
	.BYTE	"THENREADGOTOELSENEXTSTOPDATA"
	.BYTE	"FILECHR$MID$STEPSTR$CALLSINH"
;LENGTH=5
LNG5	.BYTE	"PRINTINPUTGOSUBCLOSELEFT$"
;LENGTH=6
LNG6	.BYTE	"RETURNRIGHT$REMARK"
;LENGTH=7
LNG7	.BYTE	"RESTORE"
;LENGTH=9
LNG9	.BYTE	"RANDOMIZE"
;TOKEN TABLE
;THIS TABLE MUST BE ORDERED IN THE SAME ORDER AS THE RESERVED WORD TABLE.  THE
;FIRST ENTRY DOES NOT CORRESPOND TO ANY VALID TOKEN.
TK	.BYTE	0
;LENGTH=1
	.BYTE	TCR,LESST,LPARN,TPLUS,ASTRK,RPARN,TMINUS,COMMA,EQUAL,SLASH
	.BYTE	SCOLN,GTRT,TCOLIN,POUND,EXPON
;LENGTH=2
	.BYTE	TIF,TTO,TGO,TON,TOR,EQUAL,LESST,GTRT,TLEQ,TGEQ,TNE
;LENGTH=3
	.BYTE	TFOR,TLET,TREM,TDIM,TDEF,TNOT,TAND,72,69,70,73,74,78,84,76,71
	.BYTE	65,75,66,TEND,79,67,68,81,88,TXOR,TSUB
;LENGTH=4
	.BYTE	80,TOUT
	.BYTE	TTHEN,TREAD,TGOTO,TELSE,TNEXT,TSTOP,TDATA,TFILE,82,85,TSTEP
	.BYTE	87,89,90
;LENGTH=5
	.BYTE	TPRNT,TINPT,TGOSB,TCLOS,83
;LENGTH=6
	.BYTE	TRETN,86,TREM
;LENGTH=7
	.BYTE	TREST
;LENGTH=9
	.BYTE	TIRN
;TOKEN OFFSET TABLE
OFFSET	.BYTE	0,0,15,37,118,182,207,225,232,232
;RESERVED WORD COUNT TABLE
;EACH ENTRY IS THE NUMBER OF RESERVED WORDS OF THE ASSOCIATED LENGTH (0 AND UP)
COUNT	.BYTE	0,15,11,27,16,5,3,1,0,1
;EACH ENTRY IS THE INDEX INTO THE TOKEN TABLE FOR THE FIRST TOKEN OF THE
;ASSOCIATED LENGTH (0 AND UP)
TKOS	.BYTE	0,0,15,26,53,69,74,77,78,78
;
ST	.BYTE	1,1,0,1,1,1,1,1,1,1,1,0,0,1,0,1,5,65,70,5,71,70,65,5,1,1
;ERROR MESSAGES
ERM0	.BYTE	"DUPLICATE LABELS OR "
	.BYTE	"SYNCHRONIZATION ERROR$"
ERM1	.BYTE	"IDENTIFIER IN DIM "
	.BYTE	"PREVIOUSLY DEFINED$"
ERM2	.BYTE	"PREDEFINED FUNCTION "
	.BYTE	"NAME PREVIOUSLY DEFINED$"
ERM3	.BYTE	"FOR LOOP INDEX NOT SIMPLE"
	.BYTE	" FLOATING POINT VARIABLE$"
ERM4	.BYTE	"INCORRECT NUMBER OF PARAMETERS"
	.BYTE	" IN FUNCTION REFERENCE$"
ERM5	.BYTE	"INVALID PARAMETER TYPE IN "
	.BYTE	"FUNCTION REFERENCE$"
ERM6	.BYTE	"UNDEFINED FUNCTION$"
ERM7	.BYTE	"INVALID CHARACTER$"
ERM8	.BYTE	"EXPRESSION IN IF STATEMENT"
	.BYTE	" NOT FLOATING POINT$"
ERM9	.BYTE	"ILLEGAL FLOATING POINT FORMAT$"
ERM10	.BYTE	"SUBSCRIPTED VARIABLE NOT "
	.BYTE	"PREVIOUSLY DIMENSIONED$"
ERM11	.BYTE	"ARRAY NAME USED AS SIMPLE"
	.BYTE	" VARAIBLE$"
ERM12	.BYTE	"STRING EXPRESSION NOT ALLOWED$"
ERM13	.BYTE	"MIXED MODE (STRING - FLOATING)"
	.BYTE	" EXPRESSION$"
ERM14	.BYTE	"NEXT VARIABLE DOES NOT "
	.BYTE	"MATCH FOR$"
ERM15	.BYTE	"NO PRODUCTION EXISTS$"
ERM16	.BYTE	"NEXT STATEMENT WITHOUT "
	.BYTE	"MATCHING FOR$"
ERM17	.BYTE	"INCORRECT NUMBER OF "
	.BYTE	"SUBSCRIPTS$"
ERM18	.BYTE	"COMPILER STACK OVERFLOW$"
ERM19	.BYTE	"SYMBOL TABLE OVERFLOW$"
ERM20	.BYTE	"UNDEFINED LABEL$"
ERM21	.BYTE	"VARC TABLE OVERFLOW$"
ERM22	.BYTE	"UNTERMINATED STRING$"
ERM23	.BYTE	"INVALID TYPE IN FILE"
	.BYTE	" IDENTIFIER$"
ERM24	.BYTE	"FOR WITHOUT MATCHING NEXT$"
;ERROR MESSAGE TABLE
ERMTBL	.WORD	ERM0,ERM1,ERM2,ERM3,ERM4,ERM5,ERM6,ERM7
	.WORD	ERM8,ERM9,ERM10,ERM11,ERM12,ERM13,ERM14,ERM15
	.WORD	ERM16,ERM17,ERM18,ERM19,ERM20,ERM21,ERM22,ERM23
	.WORD	ERM24
;MESSAGES AND STRINGS
PRDMSG	.BYTE	"PROD $"
ERDMSG	.BYTE	" ERRORS DETECTED$"
DEMSG	.BYTE	"DISK ERROR - ABORTING $"
BASSTR	.BYTE	"BAS"
NSMSG	.BYTE	"NO SOURCE - ABORTING $"
ADDEND	.BYTE	"END",CR,LF
OPNMSG	.BYTE	"BASIC-E/65 COMPILER - "
	.BYTE	"VERSION 2.03-A$"
;VARIABLES - THIS AREA HOLDS DATA MOVED FROM PAGE ZERO TO SAVE PAGE ZERO SPACE
PASS1	.BYTE	0		;PASS 1 IF TRUE I=TRUE
PASS2	.BYTE	0		;PASS 2 IF TRUE
LSTPRD	.BYTE	0		;LIST PRODUCTION IF TRUE (LISTPROD)
LSTSRC	.BYTE	0		;LIST SOURCE IF TRUE (LISTSOURCE)
DEBUGL	.BYTE	0		;DEBUG LINE NUMBERS IF TRUE (DEBUGLN)
LWRUPR	.BYTE	0		;CONVERT IF TRUE I=TRUE (LOWERTOUPPER)
NINTFL	.BYTE	0		;NO .INT FILE IF TRUE (NOINTFILE)
LSTFLG	.BYTE	0		;LIST DEVICE IF FALSE (LSTFLAG)
EOLSTS	.BYTE	0		;FLAG THAT EOL (CR) READ BY SCAN
CMPLNG	.BYTE	0		;COMPILING IF TRUE (COMPILING)
FORSTM	.BYTE	0		;FOR STATEMENT FLAG (FORSTMT)
FILEIO	.BYTE	0		;FILE I/O FLAG
;NEXT VARIABLE IS NEVER READ OR TESTED - NEED TO CHECK NEED
RNDFLE	.BYTE	0		;RANDOM FILE FLAG (RANDOMFILE)
;FCBS AND SIMILAR
WFCB
	*=	*+9
	.BYTE	"INT"
	*=	*+21
PRMLST	.BYTE	"         "
;PARSER DATA TABLES
IFLBLN	.BYTE	2
IFLAB2	.BYTE	23
IFLABL	.BYTE	0
HSHTBL
	*=	HSHTSZ*2+*
HASH
	*=	*+PSTKSZ
VAR
	*=	*+PSTKSZ
TYPE
	*=	*+PSTKSZ
STYPE
	*=	*+PSTKSZ
SRLOC
	*=	PSTKSZ*2+*
SYMLOC
	*=	PSTKSZ*2+*
STSTAK				;(STATESTACK)
	*=	PSTKSZ*2+*
VARC
	*=	*+VARCSZ
ONSTAK
	*=	*+MAXOCT
ONSP	=	ONSTAK
;BUFFERS
INPBUF				;INPUT
	*=	*+SRCRSZ
OUTBUF				;OUTPUT
	*=	*+INTRSZ
CONBUF				;CONSOLE
	*=	*+CBUFSZ+2
;START OF FREE MEMORY
MEMORY
	.END
